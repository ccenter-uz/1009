"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/whatwg-url";
exports.ids = ["vendor-chunks/whatwg-url"];
exports.modules = {

/***/ "(ssr)/./node_modules/whatwg-url/index.js":
/*!******************************************!*\
  !*** ./node_modules/whatwg-url/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst { URL, URLSearchParams } = __webpack_require__(/*! ./webidl2js-wrapper */ \"(ssr)/./node_modules/whatwg-url/webidl2js-wrapper.js\");\nconst urlStateMachine = __webpack_require__(/*! ./lib/url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\");\nconst percentEncoding = __webpack_require__(/*! ./lib/percent-encoding */ \"(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\");\nconst sharedGlobalObject = {\n    Array,\n    Object,\n    Promise,\n    String,\n    TypeError\n};\nURL.install(sharedGlobalObject, [\n    \"Window\"\n]);\nURLSearchParams.install(sharedGlobalObject, [\n    \"Window\"\n]);\nexports.URL = sharedGlobalObject.URL;\nexports.URLSearchParams = sharedGlobalObject.URLSearchParams;\nexports.parseURL = urlStateMachine.parseURL;\nexports.basicURLParse = urlStateMachine.basicURLParse;\nexports.serializeURL = urlStateMachine.serializeURL;\nexports.serializePath = urlStateMachine.serializePath;\nexports.serializeHost = urlStateMachine.serializeHost;\nexports.serializeInteger = urlStateMachine.serializeInteger;\nexports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;\nexports.setTheUsername = urlStateMachine.setTheUsername;\nexports.setThePassword = urlStateMachine.setThePassword;\nexports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;\nexports.hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;\nexports.percentDecodeString = percentEncoding.percentDecodeString;\nexports.percentDecodeBytes = percentEncoding.percentDecodeBytes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLE1BQU0sRUFBRUEsR0FBRyxFQUFFQyxlQUFlLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsaUZBQXFCO0FBQzlELE1BQU1DLGtCQUFrQkQsbUJBQU9BLENBQUMseUZBQXlCO0FBQ3pELE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsdUZBQXdCO0FBRXhELE1BQU1HLHFCQUFxQjtJQUFFQztJQUFPQztJQUFRQztJQUFTQztJQUFRQztBQUFVO0FBQ3ZFVixJQUFJVyxPQUFPLENBQUNOLG9CQUFvQjtJQUFDO0NBQVM7QUFDMUNKLGdCQUFnQlUsT0FBTyxDQUFDTixvQkFBb0I7SUFBQztDQUFTO0FBRXRETyxXQUFXLEdBQUdQLG1CQUFtQkwsR0FBRztBQUNwQ1ksdUJBQXVCLEdBQUdQLG1CQUFtQkosZUFBZTtBQUU1RFcsZ0JBQWdCLEdBQUdULGdCQUFnQlUsUUFBUTtBQUMzQ0QscUJBQXFCLEdBQUdULGdCQUFnQlcsYUFBYTtBQUNyREYsb0JBQW9CLEdBQUdULGdCQUFnQlksWUFBWTtBQUNuREgscUJBQXFCLEdBQUdULGdCQUFnQmEsYUFBYTtBQUNyREoscUJBQXFCLEdBQUdULGdCQUFnQmMsYUFBYTtBQUNyREwsd0JBQXdCLEdBQUdULGdCQUFnQmUsZ0JBQWdCO0FBQzNETiwwQkFBMEIsR0FBR1QsZ0JBQWdCZ0Isa0JBQWtCO0FBQy9EUCxzQkFBc0IsR0FBR1QsZ0JBQWdCaUIsY0FBYztBQUN2RFIsc0JBQXNCLEdBQUdULGdCQUFnQmtCLGNBQWM7QUFDdkRULHVDQUF1QyxHQUFHVCxnQkFBZ0JtQiwrQkFBK0I7QUFDekZWLHVCQUF1QixHQUFHVCxnQkFBZ0JvQixlQUFlO0FBRXpEWCwyQkFBMkIsR0FBR1IsZ0JBQWdCb0IsbUJBQW1CO0FBQ2pFWiwwQkFBMEIsR0FBR1IsZ0JBQWdCcUIsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGFjdC1jZW50ZXIvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9pbmRleC5qcz82Yzc4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IFVSTCwgVVJMU2VhcmNoUGFyYW1zIH0gPSByZXF1aXJlKFwiLi93ZWJpZGwyanMtd3JhcHBlclwiKTtcbmNvbnN0IHVybFN0YXRlTWFjaGluZSA9IHJlcXVpcmUoXCIuL2xpYi91cmwtc3RhdGUtbWFjaGluZVwiKTtcbmNvbnN0IHBlcmNlbnRFbmNvZGluZyA9IHJlcXVpcmUoXCIuL2xpYi9wZXJjZW50LWVuY29kaW5nXCIpO1xuXG5jb25zdCBzaGFyZWRHbG9iYWxPYmplY3QgPSB7IEFycmF5LCBPYmplY3QsIFByb21pc2UsIFN0cmluZywgVHlwZUVycm9yIH07XG5VUkwuaW5zdGFsbChzaGFyZWRHbG9iYWxPYmplY3QsIFtcIldpbmRvd1wiXSk7XG5VUkxTZWFyY2hQYXJhbXMuaW5zdGFsbChzaGFyZWRHbG9iYWxPYmplY3QsIFtcIldpbmRvd1wiXSk7XG5cbmV4cG9ydHMuVVJMID0gc2hhcmVkR2xvYmFsT2JqZWN0LlVSTDtcbmV4cG9ydHMuVVJMU2VhcmNoUGFyYW1zID0gc2hhcmVkR2xvYmFsT2JqZWN0LlVSTFNlYXJjaFBhcmFtcztcblxuZXhwb3J0cy5wYXJzZVVSTCA9IHVybFN0YXRlTWFjaGluZS5wYXJzZVVSTDtcbmV4cG9ydHMuYmFzaWNVUkxQYXJzZSA9IHVybFN0YXRlTWFjaGluZS5iYXNpY1VSTFBhcnNlO1xuZXhwb3J0cy5zZXJpYWxpemVVUkwgPSB1cmxTdGF0ZU1hY2hpbmUuc2VyaWFsaXplVVJMO1xuZXhwb3J0cy5zZXJpYWxpemVQYXRoID0gdXJsU3RhdGVNYWNoaW5lLnNlcmlhbGl6ZVBhdGg7XG5leHBvcnRzLnNlcmlhbGl6ZUhvc3QgPSB1cmxTdGF0ZU1hY2hpbmUuc2VyaWFsaXplSG9zdDtcbmV4cG9ydHMuc2VyaWFsaXplSW50ZWdlciA9IHVybFN0YXRlTWFjaGluZS5zZXJpYWxpemVJbnRlZ2VyO1xuZXhwb3J0cy5zZXJpYWxpemVVUkxPcmlnaW4gPSB1cmxTdGF0ZU1hY2hpbmUuc2VyaWFsaXplVVJMT3JpZ2luO1xuZXhwb3J0cy5zZXRUaGVVc2VybmFtZSA9IHVybFN0YXRlTWFjaGluZS5zZXRUaGVVc2VybmFtZTtcbmV4cG9ydHMuc2V0VGhlUGFzc3dvcmQgPSB1cmxTdGF0ZU1hY2hpbmUuc2V0VGhlUGFzc3dvcmQ7XG5leHBvcnRzLmNhbm5vdEhhdmVBVXNlcm5hbWVQYXNzd29yZFBvcnQgPSB1cmxTdGF0ZU1hY2hpbmUuY2Fubm90SGF2ZUFVc2VybmFtZVBhc3N3b3JkUG9ydDtcbmV4cG9ydHMuaGFzQW5PcGFxdWVQYXRoID0gdXJsU3RhdGVNYWNoaW5lLmhhc0FuT3BhcXVlUGF0aDtcblxuZXhwb3J0cy5wZXJjZW50RGVjb2RlU3RyaW5nID0gcGVyY2VudEVuY29kaW5nLnBlcmNlbnREZWNvZGVTdHJpbmc7XG5leHBvcnRzLnBlcmNlbnREZWNvZGVCeXRlcyA9IHBlcmNlbnRFbmNvZGluZy5wZXJjZW50RGVjb2RlQnl0ZXM7XG4iXSwibmFtZXMiOlsiVVJMIiwiVVJMU2VhcmNoUGFyYW1zIiwicmVxdWlyZSIsInVybFN0YXRlTWFjaGluZSIsInBlcmNlbnRFbmNvZGluZyIsInNoYXJlZEdsb2JhbE9iamVjdCIsIkFycmF5IiwiT2JqZWN0IiwiUHJvbWlzZSIsIlN0cmluZyIsIlR5cGVFcnJvciIsImluc3RhbGwiLCJleHBvcnRzIiwicGFyc2VVUkwiLCJiYXNpY1VSTFBhcnNlIiwic2VyaWFsaXplVVJMIiwic2VyaWFsaXplUGF0aCIsInNlcmlhbGl6ZUhvc3QiLCJzZXJpYWxpemVJbnRlZ2VyIiwic2VyaWFsaXplVVJMT3JpZ2luIiwic2V0VGhlVXNlcm5hbWUiLCJzZXRUaGVQYXNzd29yZCIsImNhbm5vdEhhdmVBVXNlcm5hbWVQYXNzd29yZFBvcnQiLCJoYXNBbk9wYXF1ZVBhdGgiLCJwZXJjZW50RGVjb2RlU3RyaW5nIiwicGVyY2VudERlY29kZUJ5dGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/Function.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/Function.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/./node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/whatwg-url/lib/utils.js\");\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {})=>{\n    if (typeof value !== \"function\") {\n        throw new globalObject.TypeError(context + \" is not a function\");\n    }\n    function invokeTheCallbackFunction(...args) {\n        const thisArg = utils.tryWrapperForImpl(this);\n        let callResult;\n        for(let i = 0; i < args.length; i++){\n            args[i] = utils.tryWrapperForImpl(args[i]);\n        }\n        callResult = Reflect.apply(value, thisArg, args);\n        callResult = conversions[\"any\"](callResult, {\n            context: context,\n            globals: globalObject\n        });\n        return callResult;\n    }\n    invokeTheCallbackFunction.construct = (...args)=>{\n        for(let i = 0; i < args.length; i++){\n            args[i] = utils.tryWrapperForImpl(args[i]);\n        }\n        let callResult = Reflect.construct(value, args);\n        callResult = conversions[\"any\"](callResult, {\n            context: context,\n            globals: globalObject\n        });\n        return callResult;\n    };\n    invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n    invokeTheCallbackFunction.objectReference = value;\n    return invokeTheCallbackFunction;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvRnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQyxnRkFBb0I7QUFDaEQsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUMsZ0VBQVk7QUFFbENFLGVBQWUsR0FBRyxDQUFDRSxjQUFjQyxPQUFPLEVBQUVDLFVBQVUsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0UsSUFBSSxPQUFPRCxVQUFVLFlBQVk7UUFDL0IsTUFBTSxJQUFJRCxhQUFhRyxTQUFTLENBQUNELFVBQVU7SUFDN0M7SUFFQSxTQUFTRSwwQkFBMEIsR0FBR0MsSUFBSTtRQUN4QyxNQUFNQyxVQUFVVCxNQUFNVSxpQkFBaUIsQ0FBQyxJQUFJO1FBQzVDLElBQUlDO1FBRUosSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLEtBQUtLLE1BQU0sRUFBRUQsSUFBSztZQUNwQ0osSUFBSSxDQUFDSSxFQUFFLEdBQUdaLE1BQU1VLGlCQUFpQixDQUFDRixJQUFJLENBQUNJLEVBQUU7UUFDM0M7UUFFQUQsYUFBYUcsUUFBUUMsS0FBSyxDQUFDWCxPQUFPSyxTQUFTRDtRQUUzQ0csYUFBYWIsV0FBVyxDQUFDLE1BQU0sQ0FBQ2EsWUFBWTtZQUFFTixTQUFTQTtZQUFTVyxTQUFTYjtRQUFhO1FBRXRGLE9BQU9RO0lBQ1Q7SUFFQUosMEJBQTBCVSxTQUFTLEdBQUcsQ0FBQyxHQUFHVDtRQUN4QyxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosS0FBS0ssTUFBTSxFQUFFRCxJQUFLO1lBQ3BDSixJQUFJLENBQUNJLEVBQUUsR0FBR1osTUFBTVUsaUJBQWlCLENBQUNGLElBQUksQ0FBQ0ksRUFBRTtRQUMzQztRQUVBLElBQUlELGFBQWFHLFFBQVFHLFNBQVMsQ0FBQ2IsT0FBT0k7UUFFMUNHLGFBQWFiLFdBQVcsQ0FBQyxNQUFNLENBQUNhLFlBQVk7WUFBRU4sU0FBU0E7WUFBU1csU0FBU2I7UUFBYTtRQUV0RixPQUFPUTtJQUNUO0lBRUFKLHlCQUF5QixDQUFDUCxNQUFNa0IsYUFBYSxDQUFDLEdBQUdkO0lBQ2pERywwQkFBMEJZLGVBQWUsR0FBR2Y7SUFFNUMsT0FBT0c7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRhY3QtY2VudGVyLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL0Z1bmN0aW9uLmpzPzBlN2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGNvbnZlcnNpb25zID0gcmVxdWlyZShcIndlYmlkbC1jb252ZXJzaW9uc1wiKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5cbmV4cG9ydHMuY29udmVydCA9IChnbG9iYWxPYmplY3QsIHZhbHVlLCB7IGNvbnRleHQgPSBcIlRoZSBwcm92aWRlZCB2YWx1ZVwiIH0gPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihjb250ZXh0ICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VUaGVDYWxsYmFja0Z1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0aGlzQXJnID0gdXRpbHMudHJ5V3JhcHBlckZvckltcGwodGhpcyk7XG4gICAgbGV0IGNhbGxSZXN1bHQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSB1dGlscy50cnlXcmFwcGVyRm9ySW1wbChhcmdzW2ldKTtcbiAgICB9XG5cbiAgICBjYWxsUmVzdWx0ID0gUmVmbGVjdC5hcHBseSh2YWx1ZSwgdGhpc0FyZywgYXJncyk7XG5cbiAgICBjYWxsUmVzdWx0ID0gY29udmVyc2lvbnNbXCJhbnlcIl0oY2FsbFJlc3VsdCwgeyBjb250ZXh0OiBjb250ZXh0LCBnbG9iYWxzOiBnbG9iYWxPYmplY3QgfSk7XG5cbiAgICByZXR1cm4gY2FsbFJlc3VsdDtcbiAgfVxuXG4gIGludm9rZVRoZUNhbGxiYWNrRnVuY3Rpb24uY29uc3RydWN0ID0gKC4uLmFyZ3MpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSB1dGlscy50cnlXcmFwcGVyRm9ySW1wbChhcmdzW2ldKTtcbiAgICB9XG5cbiAgICBsZXQgY2FsbFJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KHZhbHVlLCBhcmdzKTtcblxuICAgIGNhbGxSZXN1bHQgPSBjb252ZXJzaW9uc1tcImFueVwiXShjYWxsUmVzdWx0LCB7IGNvbnRleHQ6IGNvbnRleHQsIGdsb2JhbHM6IGdsb2JhbE9iamVjdCB9KTtcblxuICAgIHJldHVybiBjYWxsUmVzdWx0O1xuICB9O1xuXG4gIGludm9rZVRoZUNhbGxiYWNrRnVuY3Rpb25bdXRpbHMud3JhcHBlclN5bWJvbF0gPSB2YWx1ZTtcbiAgaW52b2tlVGhlQ2FsbGJhY2tGdW5jdGlvbi5vYmplY3RSZWZlcmVuY2UgPSB2YWx1ZTtcblxuICByZXR1cm4gaW52b2tlVGhlQ2FsbGJhY2tGdW5jdGlvbjtcbn07XG4iXSwibmFtZXMiOlsiY29udmVyc2lvbnMiLCJyZXF1aXJlIiwidXRpbHMiLCJleHBvcnRzIiwiY29udmVydCIsImdsb2JhbE9iamVjdCIsInZhbHVlIiwiY29udGV4dCIsIlR5cGVFcnJvciIsImludm9rZVRoZUNhbGxiYWNrRnVuY3Rpb24iLCJhcmdzIiwidGhpc0FyZyIsInRyeVdyYXBwZXJGb3JJbXBsIiwiY2FsbFJlc3VsdCIsImkiLCJsZW5ndGgiLCJSZWZsZWN0IiwiYXBwbHkiLCJnbG9iYWxzIiwiY29uc3RydWN0Iiwid3JhcHBlclN5bWJvbCIsIm9iamVjdFJlZmVyZW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/Function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URL-impl.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL-impl.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst usm = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\");\nconst urlencoded = __webpack_require__(/*! ./urlencoded */ \"(ssr)/./node_modules/whatwg-url/lib/urlencoded.js\");\nconst URLSearchParams = __webpack_require__(/*! ./URLSearchParams */ \"(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js\");\nexports.implementation = class URLImpl {\n    // Unlike the spec, we duplicate some code between the constructor and canParse, because we want to give useful error\n    // messages in the constructor that distinguish between the different causes of failure.\n    constructor(globalObject, constructorArgs){\n        const url = constructorArgs[0];\n        const base = constructorArgs[1];\n        let parsedBase = null;\n        if (base !== undefined) {\n            parsedBase = usm.basicURLParse(base);\n            if (parsedBase === null) {\n                throw new TypeError(`Invalid base URL: ${base}`);\n            }\n        }\n        const parsedURL = usm.basicURLParse(url, {\n            baseURL: parsedBase\n        });\n        if (parsedURL === null) {\n            throw new TypeError(`Invalid URL: ${url}`);\n        }\n        const query = parsedURL.query !== null ? parsedURL.query : \"\";\n        this._url = parsedURL;\n        // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n        // question mark by default. Therefore the doNotStripQMark hack is used.\n        this._query = URLSearchParams.createImpl(globalObject, [\n            query\n        ], {\n            doNotStripQMark: true\n        });\n        this._query._url = this;\n    }\n    static canParse(url, base) {\n        let parsedBase = null;\n        if (base !== undefined) {\n            parsedBase = usm.basicURLParse(base);\n            if (parsedBase === null) {\n                return false;\n            }\n        }\n        const parsedURL = usm.basicURLParse(url, {\n            baseURL: parsedBase\n        });\n        if (parsedURL === null) {\n            return false;\n        }\n        return true;\n    }\n    get href() {\n        return usm.serializeURL(this._url);\n    }\n    set href(v) {\n        const parsedURL = usm.basicURLParse(v);\n        if (parsedURL === null) {\n            throw new TypeError(`Invalid URL: ${v}`);\n        }\n        this._url = parsedURL;\n        this._query._list.splice(0);\n        const { query } = parsedURL;\n        if (query !== null) {\n            this._query._list = urlencoded.parseUrlencodedString(query);\n        }\n    }\n    get origin() {\n        return usm.serializeURLOrigin(this._url);\n    }\n    get protocol() {\n        return `${this._url.scheme}:`;\n    }\n    set protocol(v) {\n        usm.basicURLParse(`${v}:`, {\n            url: this._url,\n            stateOverride: \"scheme start\"\n        });\n    }\n    get username() {\n        return this._url.username;\n    }\n    set username(v) {\n        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n            return;\n        }\n        usm.setTheUsername(this._url, v);\n    }\n    get password() {\n        return this._url.password;\n    }\n    set password(v) {\n        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n            return;\n        }\n        usm.setThePassword(this._url, v);\n    }\n    get host() {\n        const url = this._url;\n        if (url.host === null) {\n            return \"\";\n        }\n        if (url.port === null) {\n            return usm.serializeHost(url.host);\n        }\n        return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n    }\n    set host(v) {\n        if (usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        usm.basicURLParse(v, {\n            url: this._url,\n            stateOverride: \"host\"\n        });\n    }\n    get hostname() {\n        if (this._url.host === null) {\n            return \"\";\n        }\n        return usm.serializeHost(this._url.host);\n    }\n    set hostname(v) {\n        if (usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        usm.basicURLParse(v, {\n            url: this._url,\n            stateOverride: \"hostname\"\n        });\n    }\n    get port() {\n        if (this._url.port === null) {\n            return \"\";\n        }\n        return usm.serializeInteger(this._url.port);\n    }\n    set port(v) {\n        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n            return;\n        }\n        if (v === \"\") {\n            this._url.port = null;\n        } else {\n            usm.basicURLParse(v, {\n                url: this._url,\n                stateOverride: \"port\"\n            });\n        }\n    }\n    get pathname() {\n        return usm.serializePath(this._url);\n    }\n    set pathname(v) {\n        if (usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        this._url.path = [];\n        usm.basicURLParse(v, {\n            url: this._url,\n            stateOverride: \"path start\"\n        });\n    }\n    get search() {\n        if (this._url.query === null || this._url.query === \"\") {\n            return \"\";\n        }\n        return `?${this._url.query}`;\n    }\n    set search(v) {\n        const url = this._url;\n        if (v === \"\") {\n            url.query = null;\n            this._query._list = [];\n            this._potentiallyStripTrailingSpacesFromAnOpaquePath();\n            return;\n        }\n        const input = v[0] === \"?\" ? v.substring(1) : v;\n        url.query = \"\";\n        usm.basicURLParse(input, {\n            url,\n            stateOverride: \"query\"\n        });\n        this._query._list = urlencoded.parseUrlencodedString(input);\n    }\n    get searchParams() {\n        return this._query;\n    }\n    get hash() {\n        if (this._url.fragment === null || this._url.fragment === \"\") {\n            return \"\";\n        }\n        return `#${this._url.fragment}`;\n    }\n    set hash(v) {\n        if (v === \"\") {\n            this._url.fragment = null;\n            this._potentiallyStripTrailingSpacesFromAnOpaquePath();\n            return;\n        }\n        const input = v[0] === \"#\" ? v.substring(1) : v;\n        this._url.fragment = \"\";\n        usm.basicURLParse(input, {\n            url: this._url,\n            stateOverride: \"fragment\"\n        });\n    }\n    toJSON() {\n        return this.href;\n    }\n    _potentiallyStripTrailingSpacesFromAnOpaquePath() {\n        if (!usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        if (this._url.fragment !== null) {\n            return;\n        }\n        if (this._url.query !== null) {\n            return;\n        }\n        this._url.path = this._url.path.replace(/\\u0020+$/u, \"\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URL-impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URL.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/./node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/whatwg-url/lib/utils.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"URL\";\nexports.is = (value)=>{\n    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = (value)=>{\n    return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {})=>{\n    if (exports.is(value)) {\n        return utils.implForWrapper(value);\n    }\n    throw new globalObject.TypeError(`${context} is not of type 'URL'.`);\n};\nfunction makeWrapper(globalObject, newTarget) {\n    let proto;\n    if (newTarget !== undefined) {\n        proto = newTarget.prototype;\n    }\n    if (!utils.isObject(proto)) {\n        proto = globalObject[ctorRegistrySymbol][\"URL\"].prototype;\n    }\n    return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = makeWrapper(globalObject);\n    return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = exports.create(globalObject, constructorArgs, privateData);\n    return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject)=>{};\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {})=>{\n    privateData.wrapper = wrapper;\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: new Impl.implementation(globalObject, constructorArgs, privateData),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper;\n};\nexports[\"new\"] = (globalObject, newTarget)=>{\n    const wrapper = makeWrapper(globalObject, newTarget);\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: Object.create(Impl.implementation.prototype),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper[implSymbol];\n};\nconst exposed = new Set([\n    \"Window\",\n    \"Worker\"\n]);\nexports.install = (globalObject, globalNames)=>{\n    if (!globalNames.some((globalName)=>exposed.has(globalName))) {\n        return;\n    }\n    const ctorRegistry = utils.initCtorRegistry(globalObject);\n    class URL {\n        constructor(url){\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to construct 'URL': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to construct 'URL': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return exports.setup(Object.create(new.target.prototype), globalObject, args);\n        }\n        toJSON() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'toJSON' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol].toJSON();\n        }\n        get href() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get href' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"href\"];\n        }\n        set href(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set href' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'href' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"href\"] = V;\n        }\n        toString() {\n            const esValue = this;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'toString' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"href\"];\n        }\n        get origin() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get origin' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"origin\"];\n        }\n        get protocol() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get protocol' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"protocol\"];\n        }\n        set protocol(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set protocol' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'protocol' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"protocol\"] = V;\n        }\n        get username() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get username' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"username\"];\n        }\n        set username(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set username' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'username' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"username\"] = V;\n        }\n        get password() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get password' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"password\"];\n        }\n        set password(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set password' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'password' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"password\"] = V;\n        }\n        get host() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get host' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"host\"];\n        }\n        set host(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set host' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'host' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"host\"] = V;\n        }\n        get hostname() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get hostname' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"hostname\"];\n        }\n        set hostname(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set hostname' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'hostname' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"hostname\"] = V;\n        }\n        get port() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get port' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"port\"];\n        }\n        set port(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set port' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'port' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"port\"] = V;\n        }\n        get pathname() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get pathname' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"pathname\"];\n        }\n        set pathname(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set pathname' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'pathname' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"pathname\"] = V;\n        }\n        get search() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get search' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"search\"];\n        }\n        set search(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set search' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'search' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"search\"] = V;\n        }\n        get searchParams() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get searchParams' called on an object that is not a valid instance of URL.\");\n            }\n            return utils.getSameObject(this, \"searchParams\", ()=>{\n                return utils.tryWrapperForImpl(esValue[implSymbol][\"searchParams\"]);\n            });\n        }\n        get hash() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get hash' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"hash\"];\n        }\n        set hash(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set hash' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'hash' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"hash\"] = V;\n        }\n        static canParse(url) {\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'canParse' on 'URL': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'canParse' on 'URL': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to execute 'canParse' on 'URL': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return Impl.implementation.canParse(...args);\n        }\n    }\n    Object.defineProperties(URL.prototype, {\n        toJSON: {\n            enumerable: true\n        },\n        href: {\n            enumerable: true\n        },\n        toString: {\n            enumerable: true\n        },\n        origin: {\n            enumerable: true\n        },\n        protocol: {\n            enumerable: true\n        },\n        username: {\n            enumerable: true\n        },\n        password: {\n            enumerable: true\n        },\n        host: {\n            enumerable: true\n        },\n        hostname: {\n            enumerable: true\n        },\n        port: {\n            enumerable: true\n        },\n        pathname: {\n            enumerable: true\n        },\n        search: {\n            enumerable: true\n        },\n        searchParams: {\n            enumerable: true\n        },\n        hash: {\n            enumerable: true\n        },\n        [Symbol.toStringTag]: {\n            value: \"URL\",\n            configurable: true\n        }\n    });\n    Object.defineProperties(URL, {\n        canParse: {\n            enumerable: true\n        }\n    });\n    ctorRegistry[interfaceName] = URL;\n    Object.defineProperty(globalObject, interfaceName, {\n        configurable: true,\n        writable: true,\n        value: URL\n    });\n    if (globalNames.includes(\"Window\")) {\n        Object.defineProperty(globalObject, \"webkitURL\", {\n            configurable: true,\n            writable: true,\n            value: URL\n        });\n    }\n};\nconst Impl = __webpack_require__(/*! ./URL-impl.js */ \"(ssr)/./node_modules/whatwg-url/lib/URL-impl.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URLSearchParams-impl.js":
/*!*************************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URLSearchParams-impl.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst urlencoded = __webpack_require__(/*! ./urlencoded */ \"(ssr)/./node_modules/whatwg-url/lib/urlencoded.js\");\nexports.implementation = class URLSearchParamsImpl {\n    constructor(globalObject, constructorArgs, { doNotStripQMark = false }){\n        let init = constructorArgs[0];\n        this._list = [];\n        this._url = null;\n        if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n            init = init.slice(1);\n        }\n        if (Array.isArray(init)) {\n            for (const pair of init){\n                if (pair.length !== 2) {\n                    throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" + \"contain exactly two elements.\");\n                }\n                this._list.push([\n                    pair[0],\n                    pair[1]\n                ]);\n            }\n        } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n            for (const name of Object.keys(init)){\n                const value = init[name];\n                this._list.push([\n                    name,\n                    value\n                ]);\n            }\n        } else {\n            this._list = urlencoded.parseUrlencodedString(init);\n        }\n    }\n    _updateSteps() {\n        if (this._url !== null) {\n            let serializedQuery = urlencoded.serializeUrlencoded(this._list);\n            if (serializedQuery === \"\") {\n                serializedQuery = null;\n            }\n            this._url._url.query = serializedQuery;\n            if (serializedQuery === null) {\n                this._url._potentiallyStripTrailingSpacesFromAnOpaquePath();\n            }\n        }\n    }\n    get size() {\n        return this._list.length;\n    }\n    append(name, value) {\n        this._list.push([\n            name,\n            value\n        ]);\n        this._updateSteps();\n    }\n    delete(name, value) {\n        let i = 0;\n        while(i < this._list.length){\n            if (this._list[i][0] === name && (value === undefined || this._list[i][1] === value)) {\n                this._list.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n        this._updateSteps();\n    }\n    get(name) {\n        for (const tuple of this._list){\n            if (tuple[0] === name) {\n                return tuple[1];\n            }\n        }\n        return null;\n    }\n    getAll(name) {\n        const output = [];\n        for (const tuple of this._list){\n            if (tuple[0] === name) {\n                output.push(tuple[1]);\n            }\n        }\n        return output;\n    }\n    has(name, value) {\n        for (const tuple of this._list){\n            if (tuple[0] === name && (value === undefined || tuple[1] === value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set(name, value) {\n        let found = false;\n        let i = 0;\n        while(i < this._list.length){\n            if (this._list[i][0] === name) {\n                if (found) {\n                    this._list.splice(i, 1);\n                } else {\n                    found = true;\n                    this._list[i][1] = value;\n                    i++;\n                }\n            } else {\n                i++;\n            }\n        }\n        if (!found) {\n            this._list.push([\n                name,\n                value\n            ]);\n        }\n        this._updateSteps();\n    }\n    sort() {\n        this._list.sort((a, b)=>{\n            if (a[0] < b[0]) {\n                return -1;\n            }\n            if (a[0] > b[0]) {\n                return 1;\n            }\n            return 0;\n        });\n        this._updateSteps();\n    }\n    [Symbol.iterator]() {\n        return this._list[Symbol.iterator]();\n    }\n    toString() {\n        return urlencoded.serializeUrlencoded(this._list);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URLSearchParams-impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js":
/*!********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URLSearchParams.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/./node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/whatwg-url/lib/utils.js\");\nconst Function = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/whatwg-url/lib/Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"URLSearchParams\";\nexports.is = (value)=>{\n    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = (value)=>{\n    return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {})=>{\n    if (exports.is(value)) {\n        return utils.implForWrapper(value);\n    }\n    throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);\n};\nexports.createDefaultIterator = (globalObject, target, kind)=>{\n    const ctorRegistry = globalObject[ctorRegistrySymbol];\n    const iteratorPrototype = ctorRegistry[\"URLSearchParams Iterator\"];\n    const iterator = Object.create(iteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n        value: {\n            target,\n            kind,\n            index: 0\n        },\n        configurable: true\n    });\n    return iterator;\n};\nfunction makeWrapper(globalObject, newTarget) {\n    let proto;\n    if (newTarget !== undefined) {\n        proto = newTarget.prototype;\n    }\n    if (!utils.isObject(proto)) {\n        proto = globalObject[ctorRegistrySymbol][\"URLSearchParams\"].prototype;\n    }\n    return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = makeWrapper(globalObject);\n    return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = exports.create(globalObject, constructorArgs, privateData);\n    return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject)=>{};\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {})=>{\n    privateData.wrapper = wrapper;\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: new Impl.implementation(globalObject, constructorArgs, privateData),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper;\n};\nexports[\"new\"] = (globalObject, newTarget)=>{\n    const wrapper = makeWrapper(globalObject, newTarget);\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: Object.create(Impl.implementation.prototype),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper[implSymbol];\n};\nconst exposed = new Set([\n    \"Window\",\n    \"Worker\"\n]);\nexports.install = (globalObject, globalNames)=>{\n    if (!globalNames.some((globalName)=>exposed.has(globalName))) {\n        return;\n    }\n    const ctorRegistry = utils.initCtorRegistry(globalObject);\n    class URLSearchParams {\n        constructor(){\n            const args = [];\n            {\n                let curArg = arguments[0];\n                if (curArg !== undefined) {\n                    if (utils.isObject(curArg)) {\n                        if (curArg[Symbol.iterator] !== undefined) {\n                            if (!utils.isObject(curArg)) {\n                                throw new globalObject.TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \" is not an iterable object.\");\n                            } else {\n                                const V = [];\n                                const tmp = curArg;\n                                for (let nextItem of tmp){\n                                    if (!utils.isObject(nextItem)) {\n                                        throw new globalObject.TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \" is not an iterable object.\");\n                                    } else {\n                                        const V = [];\n                                        const tmp = nextItem;\n                                        for (let nextItem of tmp){\n                                            nextItem = conversions[\"USVString\"](nextItem, {\n                                                context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \"'s element\",\n                                                globals: globalObject\n                                            });\n                                            V.push(nextItem);\n                                        }\n                                        nextItem = V;\n                                    }\n                                    V.push(nextItem);\n                                }\n                                curArg = V;\n                            }\n                        } else {\n                            if (!utils.isObject(curArg)) {\n                                throw new globalObject.TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \" is not an object.\");\n                            } else {\n                                const result = Object.create(null);\n                                for (const key of Reflect.ownKeys(curArg)){\n                                    const desc = Object.getOwnPropertyDescriptor(curArg, key);\n                                    if (desc && desc.enumerable) {\n                                        let typedKey = key;\n                                        typedKey = conversions[\"USVString\"](typedKey, {\n                                            context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s key\",\n                                            globals: globalObject\n                                        });\n                                        let typedValue = curArg[key];\n                                        typedValue = conversions[\"USVString\"](typedValue, {\n                                            context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s value\",\n                                            globals: globalObject\n                                        });\n                                        result[typedKey] = typedValue;\n                                    }\n                                }\n                                curArg = result;\n                            }\n                        }\n                    } else {\n                        curArg = conversions[\"USVString\"](curArg, {\n                            context: \"Failed to construct 'URLSearchParams': parameter 1\",\n                            globals: globalObject\n                        });\n                    }\n                } else {\n                    curArg = \"\";\n                }\n                args.push(curArg);\n            }\n            return exports.setup(Object.create(new.target.prototype), globalObject, args);\n        }\n        append(name, value) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 2) {\n                throw new globalObject.TypeError(`Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'append' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'append' on 'URLSearchParams': parameter 2\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));\n        }\n        delete(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));\n        }\n        get(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'get' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return esValue[implSymbol].get(...args);\n        }\n        getAll(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'getAll' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));\n        }\n        has(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'has' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to execute 'has' on 'URLSearchParams': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return esValue[implSymbol].has(...args);\n        }\n        set(name, value) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 2) {\n                throw new globalObject.TypeError(`Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'set' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'set' on 'URLSearchParams': parameter 2\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));\n        }\n        sort() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'sort' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].sort());\n        }\n        toString() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'toString' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return esValue[implSymbol].toString();\n        }\n        keys() {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return exports.createDefaultIterator(globalObject, this, \"key\");\n        }\n        values() {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return exports.createDefaultIterator(globalObject, this, \"value\");\n        }\n        entries() {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return exports.createDefaultIterator(globalObject, this, \"key+value\");\n        }\n        forEach(callback) {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\");\n            }\n            callback = Function.convert(globalObject, callback, {\n                context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n            });\n            const thisArg = arguments[1];\n            let pairs = Array.from(this[implSymbol]);\n            let i = 0;\n            while(i < pairs.length){\n                const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n                callback.call(thisArg, value, key, this);\n                pairs = Array.from(this[implSymbol]);\n                i++;\n            }\n        }\n        get size() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get size' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return esValue[implSymbol][\"size\"];\n        }\n    }\n    Object.defineProperties(URLSearchParams.prototype, {\n        append: {\n            enumerable: true\n        },\n        delete: {\n            enumerable: true\n        },\n        get: {\n            enumerable: true\n        },\n        getAll: {\n            enumerable: true\n        },\n        has: {\n            enumerable: true\n        },\n        set: {\n            enumerable: true\n        },\n        sort: {\n            enumerable: true\n        },\n        toString: {\n            enumerable: true\n        },\n        keys: {\n            enumerable: true\n        },\n        values: {\n            enumerable: true\n        },\n        entries: {\n            enumerable: true\n        },\n        forEach: {\n            enumerable: true\n        },\n        size: {\n            enumerable: true\n        },\n        [Symbol.toStringTag]: {\n            value: \"URLSearchParams\",\n            configurable: true\n        },\n        [Symbol.iterator]: {\n            value: URLSearchParams.prototype.entries,\n            configurable: true,\n            writable: true\n        }\n    });\n    ctorRegistry[interfaceName] = URLSearchParams;\n    ctorRegistry[\"URLSearchParams Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n        [Symbol.toStringTag]: {\n            configurable: true,\n            value: \"URLSearchParams Iterator\"\n        }\n    });\n    utils.define(ctorRegistry[\"URLSearchParams Iterator\"], {\n        next () {\n            const internal = this && this[utils.iterInternalSymbol];\n            if (!internal) {\n                throw new globalObject.TypeError(\"next() called on a value that is not a URLSearchParams iterator object\");\n            }\n            const { target, kind, index } = internal;\n            const values = Array.from(target[implSymbol]);\n            const len = values.length;\n            if (index >= len) {\n                return newObjectInRealm(globalObject, {\n                    value: undefined,\n                    done: true\n                });\n            }\n            const pair = values[index];\n            internal.index = index + 1;\n            return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n        }\n    });\n    Object.defineProperty(globalObject, interfaceName, {\n        configurable: true,\n        writable: true,\n        value: URLSearchParams\n    });\n};\nconst Impl = __webpack_require__(/*! ./URLSearchParams-impl.js */ \"(ssr)/./node_modules/whatwg-url/lib/URLSearchParams-impl.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/encoding.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/encoding.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nconst utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true\n});\nfunction utf8Encode(string) {\n    return utf8Encoder.encode(string);\n}\nfunction utf8DecodeWithoutBOM(bytes) {\n    return utf8Decoder.decode(bytes);\n}\nmodule.exports = {\n    utf8Encode,\n    utf8DecodeWithoutBOM\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvZW5jb2RpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixNQUFNQSxjQUFjLElBQUlDO0FBQ3hCLE1BQU1DLGNBQWMsSUFBSUMsWUFBWSxTQUFTO0lBQUVDLFdBQVc7QUFBSztBQUUvRCxTQUFTQyxXQUFXQyxNQUFNO0lBQ3hCLE9BQU9OLFlBQVlPLE1BQU0sQ0FBQ0Q7QUFDNUI7QUFFQSxTQUFTRSxxQkFBcUJDLEtBQUs7SUFDakMsT0FBT1AsWUFBWVEsTUFBTSxDQUFDRDtBQUM1QjtBQUVBRSxPQUFPQyxPQUFPLEdBQUc7SUFDZlA7SUFDQUc7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRhY3QtY2VudGVyLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL2VuY29kaW5nLmpzP2Y2NjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB1dGY4RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuY29uc3QgdXRmOERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiLCB7IGlnbm9yZUJPTTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gdXRmOEVuY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHV0ZjhFbmNvZGVyLmVuY29kZShzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiB1dGY4RGVjb2RlV2l0aG91dEJPTShieXRlcykge1xuICByZXR1cm4gdXRmOERlY29kZXIuZGVjb2RlKGJ5dGVzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHV0ZjhFbmNvZGUsXG4gIHV0ZjhEZWNvZGVXaXRob3V0Qk9NXG59O1xuIl0sIm5hbWVzIjpbInV0ZjhFbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJ1dGY4RGVjb2RlciIsIlRleHREZWNvZGVyIiwiaWdub3JlQk9NIiwidXRmOEVuY29kZSIsInN0cmluZyIsImVuY29kZSIsInV0ZjhEZWNvZGVXaXRob3V0Qk9NIiwiYnl0ZXMiLCJkZWNvZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/infra.js":
/*!**********************************************!*\
  !*** ./node_modules/whatwg-url/lib/infra.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n// Note that we take code points as JS numbers, not JS strings.\nfunction isASCIIDigit(c) {\n    return c >= 0x30 && c <= 0x39;\n}\nfunction isASCIIAlpha(c) {\n    return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;\n}\nfunction isASCIIAlphanumeric(c) {\n    return isASCIIAlpha(c) || isASCIIDigit(c);\n}\nfunction isASCIIHex(c) {\n    return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;\n}\nmodule.exports = {\n    isASCIIDigit,\n    isASCIIAlpha,\n    isASCIIAlphanumeric,\n    isASCIIHex\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvaW5mcmEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYiwrREFBK0Q7QUFFL0QsU0FBU0EsYUFBYUMsQ0FBQztJQUNyQixPQUFPQSxLQUFLLFFBQVFBLEtBQUs7QUFDM0I7QUFFQSxTQUFTQyxhQUFhRCxDQUFDO0lBQ3JCLE9BQU8sS0FBTSxRQUFRQSxLQUFLLFFBQVVBLEtBQUssUUFBUUEsS0FBSztBQUN4RDtBQUVBLFNBQVNFLG9CQUFvQkYsQ0FBQztJQUM1QixPQUFPQyxhQUFhRCxNQUFNRCxhQUFhQztBQUN6QztBQUVBLFNBQVNHLFdBQVdILENBQUM7SUFDbkIsT0FBT0QsYUFBYUMsTUFBT0EsS0FBSyxRQUFRQSxLQUFLLFFBQVVBLEtBQUssUUFBUUEsS0FBSztBQUMzRTtBQUVBSSxPQUFPQyxPQUFPLEdBQUc7SUFDZk47SUFDQUU7SUFDQUM7SUFDQUM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRhY3QtY2VudGVyLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL2luZnJhLmpzPzcwMzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIE5vdGUgdGhhdCB3ZSB0YWtlIGNvZGUgcG9pbnRzIGFzIEpTIG51bWJlcnMsIG5vdCBKUyBzdHJpbmdzLlxuXG5mdW5jdGlvbiBpc0FTQ0lJRGlnaXQoYykge1xuICByZXR1cm4gYyA+PSAweDMwICYmIGMgPD0gMHgzOTtcbn1cblxuZnVuY3Rpb24gaXNBU0NJSUFscGhhKGMpIHtcbiAgcmV0dXJuIChjID49IDB4NDEgJiYgYyA8PSAweDVBKSB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSk7XG59XG5cbmZ1bmN0aW9uIGlzQVNDSUlBbHBoYW51bWVyaWMoYykge1xuICByZXR1cm4gaXNBU0NJSUFscGhhKGMpIHx8IGlzQVNDSUlEaWdpdChjKTtcbn1cblxuZnVuY3Rpb24gaXNBU0NJSUhleChjKSB7XG4gIHJldHVybiBpc0FTQ0lJRGlnaXQoYykgfHwgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NDYpIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDY2KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQVNDSUlEaWdpdCxcbiAgaXNBU0NJSUFscGhhLFxuICBpc0FTQ0lJQWxwaGFudW1lcmljLFxuICBpc0FTQ0lJSGV4XG59O1xuIl0sIm5hbWVzIjpbImlzQVNDSUlEaWdpdCIsImMiLCJpc0FTQ0lJQWxwaGEiLCJpc0FTQ0lJQWxwaGFudW1lcmljIiwiaXNBU0NJSUhleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/infra.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js":
/*!*********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/percent-encoding.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { isASCIIHex } = __webpack_require__(/*! ./infra */ \"(ssr)/./node_modules/whatwg-url/lib/infra.js\");\nconst { utf8Encode } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/whatwg-url/lib/encoding.js\");\nfunction p(char) {\n    return char.codePointAt(0);\n}\n// https://url.spec.whatwg.org/#percent-encode\nfunction percentEncode(c) {\n    let hex = c.toString(16).toUpperCase();\n    if (hex.length === 1) {\n        hex = `0${hex}`;\n    }\n    return `%${hex}`;\n}\n// https://url.spec.whatwg.org/#percent-decode\nfunction percentDecodeBytes(input) {\n    const output = new Uint8Array(input.byteLength);\n    let outputIndex = 0;\n    for(let i = 0; i < input.byteLength; ++i){\n        const byte = input[i];\n        if (byte !== 0x25) {\n            output[outputIndex++] = byte;\n        } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n            output[outputIndex++] = byte;\n        } else {\n            const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n            output[outputIndex++] = bytePoint;\n            i += 2;\n        }\n    }\n    return output.slice(0, outputIndex);\n}\n// https://url.spec.whatwg.org/#string-percent-decode\nfunction percentDecodeString(input) {\n    const bytes = utf8Encode(input);\n    return percentDecodeBytes(bytes);\n}\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\nfunction isC0ControlPercentEncode(c) {\n    return c <= 0x1F || c > 0x7E;\n}\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst extraFragmentPercentEncodeSet = new Set([\n    p(\" \"),\n    p('\"'),\n    p(\"<\"),\n    p(\">\"),\n    p(\"`\")\n]);\nfunction isFragmentPercentEncode(c) {\n    return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#query-percent-encode-set\nconst extraQueryPercentEncodeSet = new Set([\n    p(\" \"),\n    p('\"'),\n    p(\"#\"),\n    p(\"<\"),\n    p(\">\")\n]);\nfunction isQueryPercentEncode(c) {\n    return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\nfunction isSpecialQueryPercentEncode(c) {\n    return isQueryPercentEncode(c) || c === p(\"'\");\n}\n// https://url.spec.whatwg.org/#path-percent-encode-set\nconst extraPathPercentEncodeSet = new Set([\n    p(\"?\"),\n    p(\"`\"),\n    p(\"{\"),\n    p(\"}\")\n]);\nfunction isPathPercentEncode(c) {\n    return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\nconst extraUserinfoPercentEncodeSet = new Set([\n    p(\"/\"),\n    p(\":\"),\n    p(\";\"),\n    p(\"=\"),\n    p(\"@\"),\n    p(\"[\"),\n    p(\"\\\\\"),\n    p(\"]\"),\n    p(\"^\"),\n    p(\"|\")\n]);\nfunction isUserinfoPercentEncode(c) {\n    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#component-percent-encode-set\nconst extraComponentPercentEncodeSet = new Set([\n    p(\"$\"),\n    p(\"%\"),\n    p(\"&\"),\n    p(\"+\"),\n    p(\",\")\n]);\nfunction isComponentPercentEncode(c) {\n    return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\nconst extraURLEncodedPercentEncodeSet = new Set([\n    p(\"!\"),\n    p(\"'\"),\n    p(\"(\"),\n    p(\")\"),\n    p(\"~\")\n]);\nfunction isURLEncodedPercentEncode(c) {\n    return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n    const bytes = utf8Encode(codePoint);\n    let output = \"\";\n    for (const byte of bytes){\n        // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n        if (!percentEncodePredicate(byte)) {\n            output += String.fromCharCode(byte);\n        } else {\n            output += percentEncode(byte);\n        }\n    }\n    return output;\n}\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n    return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n}\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\n    let output = \"\";\n    for (const codePoint of input){\n        if (spaceAsPlus && codePoint === \" \") {\n            output += \"+\";\n        } else {\n            output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n        }\n    }\n    return output;\n}\nmodule.exports = {\n    isC0ControlPercentEncode,\n    isFragmentPercentEncode,\n    isQueryPercentEncode,\n    isSpecialQueryPercentEncode,\n    isPathPercentEncode,\n    isUserinfoPercentEncode,\n    isURLEncodedPercentEncode,\n    percentDecodeString,\n    percentDecodeBytes,\n    utf8PercentEncodeString,\n    utf8PercentEncodeCodePoint\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js":
/*!**********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/url-state-machine.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst tr46 = __webpack_require__(/*! tr46 */ \"(ssr)/./node_modules/tr46/index.js\");\nconst infra = __webpack_require__(/*! ./infra */ \"(ssr)/./node_modules/whatwg-url/lib/infra.js\");\nconst { utf8DecodeWithoutBOM } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/whatwg-url/lib/encoding.js\");\nconst { percentDecodeString, utf8PercentEncodeCodePoint, utf8PercentEncodeString, isC0ControlPercentEncode, isFragmentPercentEncode, isQueryPercentEncode, isSpecialQueryPercentEncode, isPathPercentEncode, isUserinfoPercentEncode } = __webpack_require__(/*! ./percent-encoding */ \"(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\");\nfunction p(char) {\n    return char.codePointAt(0);\n}\nconst specialSchemes = {\n    ftp: 21,\n    file: null,\n    http: 80,\n    https: 443,\n    ws: 80,\n    wss: 443\n};\nconst failure = Symbol(\"failure\");\nfunction countSymbols(str) {\n    return [\n        ...str\n    ].length;\n}\nfunction at(input, idx) {\n    const c = input[idx];\n    return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\nfunction isSingleDot(buffer) {\n    return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\nfunction isDoubleDot(buffer) {\n    buffer = buffer.toLowerCase();\n    return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n    return infra.isASCIIAlpha(cp1) && (cp2 === p(\":\") || cp2 === p(\"|\"));\n}\nfunction isWindowsDriveLetterString(string) {\n    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\nfunction isNormalizedWindowsDriveLetterString(string) {\n    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\nfunction containsForbiddenHostCodePoint(string) {\n    return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\nfunction containsForbiddenDomainCodePoint(string) {\n    return containsForbiddenHostCodePoint(string) || string.search(/[\\u0000-\\u001F]|%|\\u007F/u) !== -1;\n}\nfunction isSpecialScheme(scheme) {\n    return specialSchemes[scheme] !== undefined;\n}\nfunction isSpecial(url) {\n    return isSpecialScheme(url.scheme);\n}\nfunction isNotSpecial(url) {\n    return !isSpecialScheme(url.scheme);\n}\nfunction defaultPort(scheme) {\n    return specialSchemes[scheme];\n}\nfunction parseIPv4Number(input) {\n    if (input === \"\") {\n        return failure;\n    }\n    let R = 10;\n    if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n        input = input.substring(2);\n        R = 16;\n    } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n        input = input.substring(1);\n        R = 8;\n    }\n    if (input === \"\") {\n        return 0;\n    }\n    let regex = /[^0-7]/u;\n    if (R === 10) {\n        regex = /[^0-9]/u;\n    }\n    if (R === 16) {\n        regex = /[^0-9A-Fa-f]/u;\n    }\n    if (regex.test(input)) {\n        return failure;\n    }\n    return parseInt(input, R);\n}\nfunction parseIPv4(input) {\n    const parts = input.split(\".\");\n    if (parts[parts.length - 1] === \"\") {\n        if (parts.length > 1) {\n            parts.pop();\n        }\n    }\n    if (parts.length > 4) {\n        return failure;\n    }\n    const numbers = [];\n    for (const part of parts){\n        const n = parseIPv4Number(part);\n        if (n === failure) {\n            return failure;\n        }\n        numbers.push(n);\n    }\n    for(let i = 0; i < numbers.length - 1; ++i){\n        if (numbers[i] > 255) {\n            return failure;\n        }\n    }\n    if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {\n        return failure;\n    }\n    let ipv4 = numbers.pop();\n    let counter = 0;\n    for (const n of numbers){\n        ipv4 += n * 256 ** (3 - counter);\n        ++counter;\n    }\n    return ipv4;\n}\nfunction serializeIPv4(address) {\n    let output = \"\";\n    let n = address;\n    for(let i = 1; i <= 4; ++i){\n        output = String(n % 256) + output;\n        if (i !== 4) {\n            output = `.${output}`;\n        }\n        n = Math.floor(n / 256);\n    }\n    return output;\n}\nfunction parseIPv6(input) {\n    const address = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    let pieceIndex = 0;\n    let compress = null;\n    let pointer = 0;\n    input = Array.from(input, (c)=>c.codePointAt(0));\n    if (input[pointer] === p(\":\")) {\n        if (input[pointer + 1] !== p(\":\")) {\n            return failure;\n        }\n        pointer += 2;\n        ++pieceIndex;\n        compress = pieceIndex;\n    }\n    while(pointer < input.length){\n        if (pieceIndex === 8) {\n            return failure;\n        }\n        if (input[pointer] === p(\":\")) {\n            if (compress !== null) {\n                return failure;\n            }\n            ++pointer;\n            ++pieceIndex;\n            compress = pieceIndex;\n            continue;\n        }\n        let value = 0;\n        let length = 0;\n        while(length < 4 && infra.isASCIIHex(input[pointer])){\n            value = value * 0x10 + parseInt(at(input, pointer), 16);\n            ++pointer;\n            ++length;\n        }\n        if (input[pointer] === p(\".\")) {\n            if (length === 0) {\n                return failure;\n            }\n            pointer -= length;\n            if (pieceIndex > 6) {\n                return failure;\n            }\n            let numbersSeen = 0;\n            while(input[pointer] !== undefined){\n                let ipv4Piece = null;\n                if (numbersSeen > 0) {\n                    if (input[pointer] === p(\".\") && numbersSeen < 4) {\n                        ++pointer;\n                    } else {\n                        return failure;\n                    }\n                }\n                if (!infra.isASCIIDigit(input[pointer])) {\n                    return failure;\n                }\n                while(infra.isASCIIDigit(input[pointer])){\n                    const number = parseInt(at(input, pointer));\n                    if (ipv4Piece === null) {\n                        ipv4Piece = number;\n                    } else if (ipv4Piece === 0) {\n                        return failure;\n                    } else {\n                        ipv4Piece = ipv4Piece * 10 + number;\n                    }\n                    if (ipv4Piece > 255) {\n                        return failure;\n                    }\n                    ++pointer;\n                }\n                address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n                ++numbersSeen;\n                if (numbersSeen === 2 || numbersSeen === 4) {\n                    ++pieceIndex;\n                }\n            }\n            if (numbersSeen !== 4) {\n                return failure;\n            }\n            break;\n        } else if (input[pointer] === p(\":\")) {\n            ++pointer;\n            if (input[pointer] === undefined) {\n                return failure;\n            }\n        } else if (input[pointer] !== undefined) {\n            return failure;\n        }\n        address[pieceIndex] = value;\n        ++pieceIndex;\n    }\n    if (compress !== null) {\n        let swaps = pieceIndex - compress;\n        pieceIndex = 7;\n        while(pieceIndex !== 0 && swaps > 0){\n            const temp = address[compress + swaps - 1];\n            address[compress + swaps - 1] = address[pieceIndex];\n            address[pieceIndex] = temp;\n            --pieceIndex;\n            --swaps;\n        }\n    } else if (compress === null && pieceIndex !== 8) {\n        return failure;\n    }\n    return address;\n}\nfunction serializeIPv6(address) {\n    let output = \"\";\n    const compress = findLongestZeroSequence(address);\n    let ignore0 = false;\n    for(let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex){\n        if (ignore0 && address[pieceIndex] === 0) {\n            continue;\n        } else if (ignore0) {\n            ignore0 = false;\n        }\n        if (compress === pieceIndex) {\n            const separator = pieceIndex === 0 ? \"::\" : \":\";\n            output += separator;\n            ignore0 = true;\n            continue;\n        }\n        output += address[pieceIndex].toString(16);\n        if (pieceIndex !== 7) {\n            output += \":\";\n        }\n    }\n    return output;\n}\nfunction parseHost(input, isNotSpecialArg = false) {\n    if (input[0] === \"[\") {\n        if (input[input.length - 1] !== \"]\") {\n            return failure;\n        }\n        return parseIPv6(input.substring(1, input.length - 1));\n    }\n    if (isNotSpecialArg) {\n        return parseOpaqueHost(input);\n    }\n    const domain = utf8DecodeWithoutBOM(percentDecodeString(input));\n    const asciiDomain = domainToASCII(domain);\n    if (asciiDomain === failure) {\n        return failure;\n    }\n    if (containsForbiddenDomainCodePoint(asciiDomain)) {\n        return failure;\n    }\n    if (endsInANumber(asciiDomain)) {\n        return parseIPv4(asciiDomain);\n    }\n    return asciiDomain;\n}\nfunction endsInANumber(input) {\n    const parts = input.split(\".\");\n    if (parts[parts.length - 1] === \"\") {\n        if (parts.length === 1) {\n            return false;\n        }\n        parts.pop();\n    }\n    const last = parts[parts.length - 1];\n    if (parseIPv4Number(last) !== failure) {\n        return true;\n    }\n    if (/^[0-9]+$/u.test(last)) {\n        return true;\n    }\n    return false;\n}\nfunction parseOpaqueHost(input) {\n    if (containsForbiddenHostCodePoint(input)) {\n        return failure;\n    }\n    return utf8PercentEncodeString(input, isC0ControlPercentEncode);\n}\nfunction findLongestZeroSequence(arr) {\n    let maxIdx = null;\n    let maxLen = 1; // only find elements > 1\n    let currStart = null;\n    let currLen = 0;\n    for(let i = 0; i < arr.length; ++i){\n        if (arr[i] !== 0) {\n            if (currLen > maxLen) {\n                maxIdx = currStart;\n                maxLen = currLen;\n            }\n            currStart = null;\n            currLen = 0;\n        } else {\n            if (currStart === null) {\n                currStart = i;\n            }\n            ++currLen;\n        }\n    }\n    // if trailing zeros\n    if (currLen > maxLen) {\n        return currStart;\n    }\n    return maxIdx;\n}\nfunction serializeHost(host) {\n    if (typeof host === \"number\") {\n        return serializeIPv4(host);\n    }\n    // IPv6 serializer\n    if (host instanceof Array) {\n        return `[${serializeIPv6(host)}]`;\n    }\n    return host;\n}\nfunction domainToASCII(domain, beStrict = false) {\n    const result = tr46.toASCII(domain, {\n        checkBidi: true,\n        checkHyphens: false,\n        checkJoiners: true,\n        useSTD3ASCIIRules: beStrict,\n        verifyDNSLength: beStrict\n    });\n    if (result === null || result === \"\") {\n        return failure;\n    }\n    return result;\n}\nfunction trimControlChars(url) {\n    return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/ug, \"\");\n}\nfunction trimTabAndNewline(url) {\n    return url.replace(/\\u0009|\\u000A|\\u000D/ug, \"\");\n}\nfunction shortenPath(url) {\n    const { path } = url;\n    if (path.length === 0) {\n        return;\n    }\n    if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n        return;\n    }\n    path.pop();\n}\nfunction includesCredentials(url) {\n    return url.username !== \"\" || url.password !== \"\";\n}\nfunction cannotHaveAUsernamePasswordPort(url) {\n    return url.host === null || url.host === \"\" || url.scheme === \"file\";\n}\nfunction hasAnOpaquePath(url) {\n    return typeof url.path === \"string\";\n}\nfunction isNormalizedWindowsDriveLetter(string) {\n    return /^[A-Za-z]:$/u.test(string);\n}\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n    this.pointer = 0;\n    this.input = input;\n    this.base = base || null;\n    this.encodingOverride = encodingOverride || \"utf-8\";\n    this.stateOverride = stateOverride;\n    this.url = url;\n    this.failure = false;\n    this.parseError = false;\n    if (!this.url) {\n        this.url = {\n            scheme: \"\",\n            username: \"\",\n            password: \"\",\n            host: null,\n            port: null,\n            path: [],\n            query: null,\n            fragment: null\n        };\n        const res = trimControlChars(this.input);\n        if (res !== this.input) {\n            this.parseError = true;\n        }\n        this.input = res;\n    }\n    const res = trimTabAndNewline(this.input);\n    if (res !== this.input) {\n        this.parseError = true;\n    }\n    this.input = res;\n    this.state = stateOverride || \"scheme start\";\n    this.buffer = \"\";\n    this.atFlag = false;\n    this.arrFlag = false;\n    this.passwordTokenSeenFlag = false;\n    this.input = Array.from(this.input, (c)=>c.codePointAt(0));\n    for(; this.pointer <= this.input.length; ++this.pointer){\n        const c = this.input[this.pointer];\n        const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n        // exec state machine\n        const ret = this[`parse ${this.state}`](c, cStr);\n        if (!ret) {\n            break; // terminate algorithm\n        } else if (ret === failure) {\n            this.failure = true;\n            break;\n        }\n    }\n}\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n    if (infra.isASCIIAlpha(c)) {\n        this.buffer += cStr.toLowerCase();\n        this.state = \"scheme\";\n    } else if (!this.stateOverride) {\n        this.state = \"no scheme\";\n        --this.pointer;\n    } else {\n        this.parseError = true;\n        return failure;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n    if (infra.isASCIIAlphanumeric(c) || c === p(\"+\") || c === p(\"-\") || c === p(\".\")) {\n        this.buffer += cStr.toLowerCase();\n    } else if (c === p(\":\")) {\n        if (this.stateOverride) {\n            if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n                return false;\n            }\n            if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n                return false;\n            }\n            if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n                return false;\n            }\n            if (this.url.scheme === \"file\" && this.url.host === \"\") {\n                return false;\n            }\n        }\n        this.url.scheme = this.buffer;\n        if (this.stateOverride) {\n            if (this.url.port === defaultPort(this.url.scheme)) {\n                this.url.port = null;\n            }\n            return false;\n        }\n        this.buffer = \"\";\n        if (this.url.scheme === \"file\") {\n            if (this.input[this.pointer + 1] !== p(\"/\") || this.input[this.pointer + 2] !== p(\"/\")) {\n                this.parseError = true;\n            }\n            this.state = \"file\";\n        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n            this.state = \"special relative or authority\";\n        } else if (isSpecial(this.url)) {\n            this.state = \"special authority slashes\";\n        } else if (this.input[this.pointer + 1] === p(\"/\")) {\n            this.state = \"path or authority\";\n            ++this.pointer;\n        } else {\n            this.url.path = \"\";\n            this.state = \"opaque path\";\n        }\n    } else if (!this.stateOverride) {\n        this.buffer = \"\";\n        this.state = \"no scheme\";\n        this.pointer = -1;\n    } else {\n        this.parseError = true;\n        return failure;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n    if (this.base === null || hasAnOpaquePath(this.base) && c !== p(\"#\")) {\n        return failure;\n    } else if (hasAnOpaquePath(this.base) && c === p(\"#\")) {\n        this.url.scheme = this.base.scheme;\n        this.url.path = this.base.path;\n        this.url.query = this.base.query;\n        this.url.fragment = \"\";\n        this.state = \"fragment\";\n    } else if (this.base.scheme === \"file\") {\n        this.state = \"file\";\n        --this.pointer;\n    } else {\n        this.state = \"relative\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n    if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n        this.state = \"special authority ignore slashes\";\n        ++this.pointer;\n    } else {\n        this.parseError = true;\n        this.state = \"relative\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n    if (c === p(\"/\")) {\n        this.state = \"authority\";\n    } else {\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n    this.url.scheme = this.base.scheme;\n    if (c === p(\"/\")) {\n        this.state = \"relative slash\";\n    } else if (isSpecial(this.url) && c === p(\"\\\\\")) {\n        this.parseError = true;\n        this.state = \"relative slash\";\n    } else {\n        this.url.username = this.base.username;\n        this.url.password = this.base.password;\n        this.url.host = this.base.host;\n        this.url.port = this.base.port;\n        this.url.path = this.base.path.slice();\n        this.url.query = this.base.query;\n        if (c === p(\"?\")) {\n            this.url.query = \"\";\n            this.state = \"query\";\n        } else if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        } else if (!isNaN(c)) {\n            this.url.query = null;\n            this.url.path.pop();\n            this.state = \"path\";\n            --this.pointer;\n        }\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n    if (isSpecial(this.url) && (c === p(\"/\") || c === p(\"\\\\\"))) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"special authority ignore slashes\";\n    } else if (c === p(\"/\")) {\n        this.state = \"authority\";\n    } else {\n        this.url.username = this.base.username;\n        this.url.password = this.base.password;\n        this.url.host = this.base.host;\n        this.url.port = this.base.port;\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n    if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n        this.state = \"special authority ignore slashes\";\n        ++this.pointer;\n    } else {\n        this.parseError = true;\n        this.state = \"special authority ignore slashes\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n    if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n        this.state = \"authority\";\n        --this.pointer;\n    } else {\n        this.parseError = true;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n    if (c === p(\"@\")) {\n        this.parseError = true;\n        if (this.atFlag) {\n            this.buffer = `%40${this.buffer}`;\n        }\n        this.atFlag = true;\n        // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n        const len = countSymbols(this.buffer);\n        for(let pointer = 0; pointer < len; ++pointer){\n            const codePoint = this.buffer.codePointAt(pointer);\n            if (codePoint === p(\":\") && !this.passwordTokenSeenFlag) {\n                this.passwordTokenSeenFlag = true;\n                continue;\n            }\n            const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);\n            if (this.passwordTokenSeenFlag) {\n                this.url.password += encodedCodePoints;\n            } else {\n                this.url.username += encodedCodePoints;\n            }\n        }\n        this.buffer = \"\";\n    } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") || isSpecial(this.url) && c === p(\"\\\\\")) {\n        if (this.atFlag && this.buffer === \"\") {\n            this.parseError = true;\n            return failure;\n        }\n        this.pointer -= countSymbols(this.buffer) + 1;\n        this.buffer = \"\";\n        this.state = \"host\";\n    } else {\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse hostname\"] = URLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n    if (this.stateOverride && this.url.scheme === \"file\") {\n        --this.pointer;\n        this.state = \"file host\";\n    } else if (c === p(\":\") && !this.arrFlag) {\n        if (this.buffer === \"\") {\n            this.parseError = true;\n            return failure;\n        }\n        if (this.stateOverride === \"hostname\") {\n            return false;\n        }\n        const host = parseHost(this.buffer, isNotSpecial(this.url));\n        if (host === failure) {\n            return failure;\n        }\n        this.url.host = host;\n        this.buffer = \"\";\n        this.state = \"port\";\n    } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") || isSpecial(this.url) && c === p(\"\\\\\")) {\n        --this.pointer;\n        if (isSpecial(this.url) && this.buffer === \"\") {\n            this.parseError = true;\n            return failure;\n        } else if (this.stateOverride && this.buffer === \"\" && (includesCredentials(this.url) || this.url.port !== null)) {\n            this.parseError = true;\n            return false;\n        }\n        const host = parseHost(this.buffer, isNotSpecial(this.url));\n        if (host === failure) {\n            return failure;\n        }\n        this.url.host = host;\n        this.buffer = \"\";\n        this.state = \"path start\";\n        if (this.stateOverride) {\n            return false;\n        }\n    } else {\n        if (c === p(\"[\")) {\n            this.arrFlag = true;\n        } else if (c === p(\"]\")) {\n            this.arrFlag = false;\n        }\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n    if (infra.isASCIIDigit(c)) {\n        this.buffer += cStr;\n    } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") || isSpecial(this.url) && c === p(\"\\\\\") || this.stateOverride) {\n        if (this.buffer !== \"\") {\n            const port = parseInt(this.buffer);\n            if (port > 2 ** 16 - 1) {\n                this.parseError = true;\n                return failure;\n            }\n            this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n            this.buffer = \"\";\n        }\n        if (this.stateOverride) {\n            return false;\n        }\n        this.state = \"path start\";\n        --this.pointer;\n    } else {\n        this.parseError = true;\n        return failure;\n    }\n    return true;\n};\nconst fileOtherwiseCodePoints = new Set([\n    p(\"/\"),\n    p(\"\\\\\"),\n    p(\"?\"),\n    p(\"#\")\n]);\nfunction startsWithWindowsDriveLetter(input, pointer) {\n    const length = input.length - pointer;\n    return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));\n}\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n    this.url.scheme = \"file\";\n    this.url.host = \"\";\n    if (c === p(\"/\") || c === p(\"\\\\\")) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"file slash\";\n    } else if (this.base !== null && this.base.scheme === \"file\") {\n        this.url.host = this.base.host;\n        this.url.path = this.base.path.slice();\n        this.url.query = this.base.query;\n        if (c === p(\"?\")) {\n            this.url.query = \"\";\n            this.state = \"query\";\n        } else if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        } else if (!isNaN(c)) {\n            this.url.query = null;\n            if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {\n                shortenPath(this.url);\n            } else {\n                this.parseError = true;\n                this.url.path = [];\n            }\n            this.state = \"path\";\n            --this.pointer;\n        }\n    } else {\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n    if (c === p(\"/\") || c === p(\"\\\\\")) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"file host\";\n    } else {\n        if (this.base !== null && this.base.scheme === \"file\") {\n            if (!startsWithWindowsDriveLetter(this.input, this.pointer) && isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n                this.url.path.push(this.base.path[0]);\n            }\n            this.url.host = this.base.host;\n        }\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n    if (isNaN(c) || c === p(\"/\") || c === p(\"\\\\\") || c === p(\"?\") || c === p(\"#\")) {\n        --this.pointer;\n        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n            this.parseError = true;\n            this.state = \"path\";\n        } else if (this.buffer === \"\") {\n            this.url.host = \"\";\n            if (this.stateOverride) {\n                return false;\n            }\n            this.state = \"path start\";\n        } else {\n            let host = parseHost(this.buffer, isNotSpecial(this.url));\n            if (host === failure) {\n                return failure;\n            }\n            if (host === \"localhost\") {\n                host = \"\";\n            }\n            this.url.host = host;\n            if (this.stateOverride) {\n                return false;\n            }\n            this.buffer = \"\";\n            this.state = \"path start\";\n        }\n    } else {\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n    if (isSpecial(this.url)) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"path\";\n        if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n            --this.pointer;\n        }\n    } else if (!this.stateOverride && c === p(\"?\")) {\n        this.url.query = \"\";\n        this.state = \"query\";\n    } else if (!this.stateOverride && c === p(\"#\")) {\n        this.url.fragment = \"\";\n        this.state = \"fragment\";\n    } else if (c !== undefined) {\n        this.state = \"path\";\n        if (c !== p(\"/\")) {\n            --this.pointer;\n        }\n    } else if (this.stateOverride && this.url.host === null) {\n        this.url.path.push(\"\");\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n    if (isNaN(c) || c === p(\"/\") || isSpecial(this.url) && c === p(\"\\\\\") || !this.stateOverride && (c === p(\"?\") || c === p(\"#\"))) {\n        if (isSpecial(this.url) && c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        if (isDoubleDot(this.buffer)) {\n            shortenPath(this.url);\n            if (c !== p(\"/\") && !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n                this.url.path.push(\"\");\n            }\n        } else if (isSingleDot(this.buffer) && c !== p(\"/\") && !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n            this.url.path.push(\"\");\n        } else if (!isSingleDot(this.buffer)) {\n            if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n                this.buffer = `${this.buffer[0]}:`;\n            }\n            this.url.path.push(this.buffer);\n        }\n        this.buffer = \"\";\n        if (c === p(\"?\")) {\n            this.url.query = \"\";\n            this.state = \"query\";\n        }\n        if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        }\n    } else {\n        // TODO: If c is not a URL code point and not \"%\", parse error.\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse opaque path\"] = function parseOpaquePath(c) {\n    if (c === p(\"?\")) {\n        this.url.query = \"\";\n        this.state = \"query\";\n    } else if (c === p(\"#\")) {\n        this.url.fragment = \"\";\n        this.state = \"fragment\";\n    } else {\n        // TODO: Add: not a URL code point\n        if (!isNaN(c) && c !== p(\"%\")) {\n            this.parseError = true;\n        }\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        if (!isNaN(c)) {\n            this.url.path += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);\n        }\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n        this.encodingOverride = \"utf-8\";\n    }\n    if (!this.stateOverride && c === p(\"#\") || isNaN(c)) {\n        const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;\n        this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);\n        this.buffer = \"\";\n        if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        }\n    } else if (!isNaN(c)) {\n        // TODO: If c is not a URL code point and not \"%\", parse error.\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n    if (!isNaN(c)) {\n        // TODO: If c is not a URL code point and not \"%\", parse error.\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);\n    }\n    return true;\n};\nfunction serializeURL(url, excludeFragment) {\n    let output = `${url.scheme}:`;\n    if (url.host !== null) {\n        output += \"//\";\n        if (url.username !== \"\" || url.password !== \"\") {\n            output += url.username;\n            if (url.password !== \"\") {\n                output += `:${url.password}`;\n            }\n            output += \"@\";\n        }\n        output += serializeHost(url.host);\n        if (url.port !== null) {\n            output += `:${url.port}`;\n        }\n    }\n    if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === \"\") {\n        output += \"/.\";\n    }\n    output += serializePath(url);\n    if (url.query !== null) {\n        output += `?${url.query}`;\n    }\n    if (!excludeFragment && url.fragment !== null) {\n        output += `#${url.fragment}`;\n    }\n    return output;\n}\nfunction serializeOrigin(tuple) {\n    let result = `${tuple.scheme}://`;\n    result += serializeHost(tuple.host);\n    if (tuple.port !== null) {\n        result += `:${tuple.port}`;\n    }\n    return result;\n}\nfunction serializePath(url) {\n    if (hasAnOpaquePath(url)) {\n        return url.path;\n    }\n    let output = \"\";\n    for (const segment of url.path){\n        output += `/${segment}`;\n    }\n    return output;\n}\nmodule.exports.serializeURL = serializeURL;\nmodule.exports.serializePath = serializePath;\nmodule.exports.serializeURLOrigin = function(url) {\n    // https://url.spec.whatwg.org/#concept-url-origin\n    switch(url.scheme){\n        case \"blob\":\n            {\n                const pathURL = module.exports.parseURL(serializePath(url));\n                if (pathURL === null) {\n                    return \"null\";\n                }\n                if (pathURL.scheme !== \"http\" && pathURL.scheme !== \"https\") {\n                    return \"null\";\n                }\n                return module.exports.serializeURLOrigin(pathURL);\n            }\n        case \"ftp\":\n        case \"http\":\n        case \"https\":\n        case \"ws\":\n        case \"wss\":\n            return serializeOrigin({\n                scheme: url.scheme,\n                host: url.host,\n                port: url.port\n            });\n        case \"file\":\n            // The spec says:\n            // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.\n            // Browsers tested so far:\n            // - Chrome says \"file://\", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.\n            //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586\n            // - Firefox says \"null\", but treats file: URLs as same-origin sometimes based on directory stuff; see\n            //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\n            return \"null\";\n        default:\n            // serializing an opaque origin returns \"null\"\n            return \"null\";\n    }\n};\nmodule.exports.basicURLParse = function(input, options) {\n    if (options === undefined) {\n        options = {};\n    }\n    const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n    if (usm.failure) {\n        return null;\n    }\n    return usm.url;\n};\nmodule.exports.setTheUsername = function(url, username) {\n    url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);\n};\nmodule.exports.setThePassword = function(url, password) {\n    url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);\n};\nmodule.exports.serializeHost = serializeHost;\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\nmodule.exports.hasAnOpaquePath = hasAnOpaquePath;\nmodule.exports.serializeInteger = function(integer) {\n    return String(integer);\n};\nmodule.exports.parseURL = function(input, options) {\n    if (options === undefined) {\n        options = {};\n    }\n    // We don't handle blobs, so this just delegates:\n    return module.exports.basicURLParse(input, {\n        baseURL: options.baseURL,\n        encodingOverride: options.encodingOverride\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/urlencoded.js":
/*!***************************************************!*\
  !*** ./node_modules/whatwg-url/lib/urlencoded.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { utf8Encode, utf8DecodeWithoutBOM } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/whatwg-url/lib/encoding.js\");\nconst { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = __webpack_require__(/*! ./percent-encoding */ \"(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\");\nfunction p(char) {\n    return char.codePointAt(0);\n}\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n    const sequences = strictlySplitByteSequence(input, p(\"&\"));\n    const output = [];\n    for (const bytes of sequences){\n        if (bytes.length === 0) {\n            continue;\n        }\n        let name, value;\n        const indexOfEqual = bytes.indexOf(p(\"=\"));\n        if (indexOfEqual >= 0) {\n            name = bytes.slice(0, indexOfEqual);\n            value = bytes.slice(indexOfEqual + 1);\n        } else {\n            name = bytes;\n            value = new Uint8Array(0);\n        }\n        name = replaceByteInByteSequence(name, 0x2B, 0x20);\n        value = replaceByteInByteSequence(value, 0x2B, 0x20);\n        const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n        const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n        output.push([\n            nameString,\n            valueString\n        ]);\n    }\n    return output;\n}\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n    return parseUrlencoded(utf8Encode(input));\n}\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n    let encoding = \"utf-8\";\n    if (encodingOverride !== undefined) {\n        // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n        encoding = encodingOverride;\n    }\n    let output = \"\";\n    for (const [i, tuple] of tuples.entries()){\n        // TODO: handle encoding override\n        const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n        let value = tuple[1];\n        if (tuple.length > 2 && tuple[2] !== undefined) {\n            if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n                value = encoding;\n            } else if (tuple[2] === \"file\") {\n                // value is a File object\n                value = value.name;\n            }\n        }\n        value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n        if (i !== 0) {\n            output += \"&\";\n        }\n        output += `${name}=${value}`;\n    }\n    return output;\n}\nfunction strictlySplitByteSequence(buf, cp) {\n    const list = [];\n    let last = 0;\n    let i = buf.indexOf(cp);\n    while(i >= 0){\n        list.push(buf.slice(last, i));\n        last = i + 1;\n        i = buf.indexOf(cp, last);\n    }\n    if (last !== buf.length) {\n        list.push(buf.slice(last));\n    }\n    return list;\n}\nfunction replaceByteInByteSequence(buf, from, to) {\n    let i = buf.indexOf(from);\n    while(i >= 0){\n        buf[i] = to;\n        i = buf.indexOf(from, i + 1);\n    }\n    return buf;\n}\nmodule.exports = {\n    parseUrlencodedString,\n    serializeUrlencoded\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXJsZW5jb2RlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLE1BQU0sRUFBRUEsVUFBVSxFQUFFQyxvQkFBb0IsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyxtRUFBWTtBQUNqRSxNQUFNLEVBQUVDLGtCQUFrQixFQUFFQyx1QkFBdUIsRUFBRUMseUJBQXlCLEVBQUUsR0FBR0gsbUJBQU9BLENBQUMsbUZBQW9CO0FBRS9HLFNBQVNJLEVBQUVDLElBQUk7SUFDYixPQUFPQSxLQUFLQyxXQUFXLENBQUM7QUFDMUI7QUFFQSx5REFBeUQ7QUFDekQsU0FBU0MsZ0JBQWdCQyxLQUFLO0lBQzVCLE1BQU1DLFlBQVlDLDBCQUEwQkYsT0FBT0osRUFBRTtJQUNyRCxNQUFNTyxTQUFTLEVBQUU7SUFDakIsS0FBSyxNQUFNQyxTQUFTSCxVQUFXO1FBQzdCLElBQUlHLE1BQU1DLE1BQU0sS0FBSyxHQUFHO1lBQ3RCO1FBQ0Y7UUFFQSxJQUFJQyxNQUFNQztRQUNWLE1BQU1DLGVBQWVKLE1BQU1LLE9BQU8sQ0FBQ2IsRUFBRTtRQUVyQyxJQUFJWSxnQkFBZ0IsR0FBRztZQUNyQkYsT0FBT0YsTUFBTU0sS0FBSyxDQUFDLEdBQUdGO1lBQ3RCRCxRQUFRSCxNQUFNTSxLQUFLLENBQUNGLGVBQWU7UUFDckMsT0FBTztZQUNMRixPQUFPRjtZQUNQRyxRQUFRLElBQUlJLFdBQVc7UUFDekI7UUFFQUwsT0FBT00sMEJBQTBCTixNQUFNLE1BQU07UUFDN0NDLFFBQVFLLDBCQUEwQkwsT0FBTyxNQUFNO1FBRS9DLE1BQU1NLGFBQWF0QixxQkFBcUJFLG1CQUFtQmE7UUFDM0QsTUFBTVEsY0FBY3ZCLHFCQUFxQkUsbUJBQW1CYztRQUU1REosT0FBT1ksSUFBSSxDQUFDO1lBQUNGO1lBQVlDO1NBQVk7SUFDdkM7SUFDQSxPQUFPWDtBQUNUO0FBRUEsZ0VBQWdFO0FBQ2hFLFNBQVNhLHNCQUFzQmhCLEtBQUs7SUFDbEMsT0FBT0QsZ0JBQWdCVCxXQUFXVTtBQUNwQztBQUVBLDZEQUE2RDtBQUM3RCxTQUFTaUIsb0JBQW9CQyxNQUFNLEVBQUVDLG1CQUFtQkMsU0FBUztJQUMvRCxJQUFJQyxXQUFXO0lBQ2YsSUFBSUYscUJBQXFCQyxXQUFXO1FBQ2xDLHlFQUF5RTtRQUN6RUMsV0FBV0Y7SUFDYjtJQUVBLElBQUloQixTQUFTO0lBQ2IsS0FBSyxNQUFNLENBQUNtQixHQUFHQyxNQUFNLElBQUlMLE9BQU9NLE9BQU8sR0FBSTtRQUN6QyxpQ0FBaUM7UUFFakMsTUFBTWxCLE9BQU9aLHdCQUF3QjZCLEtBQUssQ0FBQyxFQUFFLEVBQUU1QiwyQkFBMkI7UUFFMUUsSUFBSVksUUFBUWdCLEtBQUssQ0FBQyxFQUFFO1FBQ3BCLElBQUlBLE1BQU1sQixNQUFNLEdBQUcsS0FBS2tCLEtBQUssQ0FBQyxFQUFFLEtBQUtILFdBQVc7WUFDOUMsSUFBSUcsS0FBSyxDQUFDLEVBQUUsS0FBSyxZQUFZakIsU0FBUyxhQUFhO2dCQUNqREMsUUFBUWM7WUFDVixPQUFPLElBQUlFLEtBQUssQ0FBQyxFQUFFLEtBQUssUUFBUTtnQkFDOUIseUJBQXlCO2dCQUN6QmhCLFFBQVFBLE1BQU1ELElBQUk7WUFDcEI7UUFDRjtRQUVBQyxRQUFRYix3QkFBd0JhLE9BQU9aLDJCQUEyQjtRQUVsRSxJQUFJMkIsTUFBTSxHQUFHO1lBQ1huQixVQUFVO1FBQ1o7UUFDQUEsVUFBVSxDQUFDLEVBQUVHLEtBQUssQ0FBQyxFQUFFQyxNQUFNLENBQUM7SUFDOUI7SUFDQSxPQUFPSjtBQUNUO0FBRUEsU0FBU0QsMEJBQTBCdUIsR0FBRyxFQUFFQyxFQUFFO0lBQ3hDLE1BQU1DLE9BQU8sRUFBRTtJQUNmLElBQUlDLE9BQU87SUFDWCxJQUFJTixJQUFJRyxJQUFJaEIsT0FBTyxDQUFDaUI7SUFDcEIsTUFBT0osS0FBSyxFQUFHO1FBQ2JLLEtBQUtaLElBQUksQ0FBQ1UsSUFBSWYsS0FBSyxDQUFDa0IsTUFBTU47UUFDMUJNLE9BQU9OLElBQUk7UUFDWEEsSUFBSUcsSUFBSWhCLE9BQU8sQ0FBQ2lCLElBQUlFO0lBQ3RCO0lBQ0EsSUFBSUEsU0FBU0gsSUFBSXBCLE1BQU0sRUFBRTtRQUN2QnNCLEtBQUtaLElBQUksQ0FBQ1UsSUFBSWYsS0FBSyxDQUFDa0I7SUFDdEI7SUFDQSxPQUFPRDtBQUNUO0FBRUEsU0FBU2YsMEJBQTBCYSxHQUFHLEVBQUVJLElBQUksRUFBRUMsRUFBRTtJQUM5QyxJQUFJUixJQUFJRyxJQUFJaEIsT0FBTyxDQUFDb0I7SUFDcEIsTUFBT1AsS0FBSyxFQUFHO1FBQ2JHLEdBQUcsQ0FBQ0gsRUFBRSxHQUFHUTtRQUNUUixJQUFJRyxJQUFJaEIsT0FBTyxDQUFDb0IsTUFBTVAsSUFBSTtJQUM1QjtJQUNBLE9BQU9HO0FBQ1Q7QUFFQU0sT0FBT0MsT0FBTyxHQUFHO0lBQ2ZoQjtJQUNBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGFjdC1jZW50ZXIvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXJsZW5jb2RlZC5qcz82YmFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgeyB1dGY4RW5jb2RlLCB1dGY4RGVjb2RlV2l0aG91dEJPTSB9ID0gcmVxdWlyZShcIi4vZW5jb2RpbmdcIik7XG5jb25zdCB7IHBlcmNlbnREZWNvZGVCeXRlcywgdXRmOFBlcmNlbnRFbmNvZGVTdHJpbmcsIGlzVVJMRW5jb2RlZFBlcmNlbnRFbmNvZGUgfSA9IHJlcXVpcmUoXCIuL3BlcmNlbnQtZW5jb2RpbmdcIik7XG5cbmZ1bmN0aW9uIHAoY2hhcikge1xuICByZXR1cm4gY2hhci5jb2RlUG9pbnRBdCgwKTtcbn1cblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybGVuY29kZWQtcGFyc2VyXG5mdW5jdGlvbiBwYXJzZVVybGVuY29kZWQoaW5wdXQpIHtcbiAgY29uc3Qgc2VxdWVuY2VzID0gc3RyaWN0bHlTcGxpdEJ5dGVTZXF1ZW5jZShpbnB1dCwgcChcIiZcIikpO1xuICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgZm9yIChjb25zdCBieXRlcyBvZiBzZXF1ZW5jZXMpIHtcbiAgICBpZiAoYnl0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgbmFtZSwgdmFsdWU7XG4gICAgY29uc3QgaW5kZXhPZkVxdWFsID0gYnl0ZXMuaW5kZXhPZihwKFwiPVwiKSk7XG5cbiAgICBpZiAoaW5kZXhPZkVxdWFsID49IDApIHtcbiAgICAgIG5hbWUgPSBieXRlcy5zbGljZSgwLCBpbmRleE9mRXF1YWwpO1xuICAgICAgdmFsdWUgPSBieXRlcy5zbGljZShpbmRleE9mRXF1YWwgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IGJ5dGVzO1xuICAgICAgdmFsdWUgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICB9XG5cbiAgICBuYW1lID0gcmVwbGFjZUJ5dGVJbkJ5dGVTZXF1ZW5jZShuYW1lLCAweDJCLCAweDIwKTtcbiAgICB2YWx1ZSA9IHJlcGxhY2VCeXRlSW5CeXRlU2VxdWVuY2UodmFsdWUsIDB4MkIsIDB4MjApO1xuXG4gICAgY29uc3QgbmFtZVN0cmluZyA9IHV0ZjhEZWNvZGVXaXRob3V0Qk9NKHBlcmNlbnREZWNvZGVCeXRlcyhuYW1lKSk7XG4gICAgY29uc3QgdmFsdWVTdHJpbmcgPSB1dGY4RGVjb2RlV2l0aG91dEJPTShwZXJjZW50RGVjb2RlQnl0ZXModmFsdWUpKTtcblxuICAgIG91dHB1dC5wdXNoKFtuYW1lU3RyaW5nLCB2YWx1ZVN0cmluZ10pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmxlbmNvZGVkLXN0cmluZy1wYXJzZXJcbmZ1bmN0aW9uIHBhcnNlVXJsZW5jb2RlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gcGFyc2VVcmxlbmNvZGVkKHV0ZjhFbmNvZGUoaW5wdXQpKTtcbn1cblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybGVuY29kZWQtc2VyaWFsaXplclxuZnVuY3Rpb24gc2VyaWFsaXplVXJsZW5jb2RlZCh0dXBsZXMsIGVuY29kaW5nT3ZlcnJpZGUgPSB1bmRlZmluZWQpIHtcbiAgbGV0IGVuY29kaW5nID0gXCJ1dGYtOFwiO1xuICBpZiAoZW5jb2RpbmdPdmVycmlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gVE9ETyBcImdldCB0aGUgb3V0cHV0IGVuY29kaW5nXCIsIGkuZS4gaGFuZGxlIGVuY29kaW5nIGxhYmVscyB2cy4gbmFtZXMuXG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZ092ZXJyaWRlO1xuICB9XG5cbiAgbGV0IG91dHB1dCA9IFwiXCI7XG4gIGZvciAoY29uc3QgW2ksIHR1cGxlXSBvZiB0dXBsZXMuZW50cmllcygpKSB7XG4gICAgLy8gVE9ETzogaGFuZGxlIGVuY29kaW5nIG92ZXJyaWRlXG5cbiAgICBjb25zdCBuYW1lID0gdXRmOFBlcmNlbnRFbmNvZGVTdHJpbmcodHVwbGVbMF0sIGlzVVJMRW5jb2RlZFBlcmNlbnRFbmNvZGUsIHRydWUpO1xuXG4gICAgbGV0IHZhbHVlID0gdHVwbGVbMV07XG4gICAgaWYgKHR1cGxlLmxlbmd0aCA+IDIgJiYgdHVwbGVbMl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR1cGxlWzJdID09PSBcImhpZGRlblwiICYmIG5hbWUgPT09IFwiX2NoYXJzZXRfXCIpIHtcbiAgICAgICAgdmFsdWUgPSBlbmNvZGluZztcbiAgICAgIH0gZWxzZSBpZiAodHVwbGVbMl0gPT09IFwiZmlsZVwiKSB7XG4gICAgICAgIC8vIHZhbHVlIGlzIGEgRmlsZSBvYmplY3RcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5uYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlID0gdXRmOFBlcmNlbnRFbmNvZGVTdHJpbmcodmFsdWUsIGlzVVJMRW5jb2RlZFBlcmNlbnRFbmNvZGUsIHRydWUpO1xuXG4gICAgaWYgKGkgIT09IDApIHtcbiAgICAgIG91dHB1dCArPSBcIiZcIjtcbiAgICB9XG4gICAgb3V0cHV0ICs9IGAke25hbWV9PSR7dmFsdWV9YDtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RseVNwbGl0Qnl0ZVNlcXVlbmNlKGJ1ZiwgY3ApIHtcbiAgY29uc3QgbGlzdCA9IFtdO1xuICBsZXQgbGFzdCA9IDA7XG4gIGxldCBpID0gYnVmLmluZGV4T2YoY3ApO1xuICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgbGlzdC5wdXNoKGJ1Zi5zbGljZShsYXN0LCBpKSk7XG4gICAgbGFzdCA9IGkgKyAxO1xuICAgIGkgPSBidWYuaW5kZXhPZihjcCwgbGFzdCk7XG4gIH1cbiAgaWYgKGxhc3QgIT09IGJ1Zi5sZW5ndGgpIHtcbiAgICBsaXN0LnB1c2goYnVmLnNsaWNlKGxhc3QpKTtcbiAgfVxuICByZXR1cm4gbGlzdDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUJ5dGVJbkJ5dGVTZXF1ZW5jZShidWYsIGZyb20sIHRvKSB7XG4gIGxldCBpID0gYnVmLmluZGV4T2YoZnJvbSk7XG4gIHdoaWxlIChpID49IDApIHtcbiAgICBidWZbaV0gPSB0bztcbiAgICBpID0gYnVmLmluZGV4T2YoZnJvbSwgaSArIDEpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZVVybGVuY29kZWRTdHJpbmcsXG4gIHNlcmlhbGl6ZVVybGVuY29kZWRcbn07XG4iXSwibmFtZXMiOlsidXRmOEVuY29kZSIsInV0ZjhEZWNvZGVXaXRob3V0Qk9NIiwicmVxdWlyZSIsInBlcmNlbnREZWNvZGVCeXRlcyIsInV0ZjhQZXJjZW50RW5jb2RlU3RyaW5nIiwiaXNVUkxFbmNvZGVkUGVyY2VudEVuY29kZSIsInAiLCJjaGFyIiwiY29kZVBvaW50QXQiLCJwYXJzZVVybGVuY29kZWQiLCJpbnB1dCIsInNlcXVlbmNlcyIsInN0cmljdGx5U3BsaXRCeXRlU2VxdWVuY2UiLCJvdXRwdXQiLCJieXRlcyIsImxlbmd0aCIsIm5hbWUiLCJ2YWx1ZSIsImluZGV4T2ZFcXVhbCIsImluZGV4T2YiLCJzbGljZSIsIlVpbnQ4QXJyYXkiLCJyZXBsYWNlQnl0ZUluQnl0ZVNlcXVlbmNlIiwibmFtZVN0cmluZyIsInZhbHVlU3RyaW5nIiwicHVzaCIsInBhcnNlVXJsZW5jb2RlZFN0cmluZyIsInNlcmlhbGl6ZVVybGVuY29kZWQiLCJ0dXBsZXMiLCJlbmNvZGluZ092ZXJyaWRlIiwidW5kZWZpbmVkIiwiZW5jb2RpbmciLCJpIiwidHVwbGUiLCJlbnRyaWVzIiwiYnVmIiwiY3AiLCJsaXN0IiwibGFzdCIsImZyb20iLCJ0byIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/urlencoded.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/whatwg-url/lib/utils.js ***!
  \**********************************************/
/***/ ((module, exports) => {

eval("\n// Returns \"Type(value) is Object\" in ES terminology.\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null || typeof value === \"function\";\n}\nconst hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\n// Like `Object.assign`, but using `[[GetOwnProperty]]` and `[[DefineOwnProperty]]`\n// instead of `[[Get]]` and `[[Set]]` and only allowing objects\nfunction define(target, source) {\n    for (const key of Reflect.ownKeys(source)){\n        const descriptor = Reflect.getOwnPropertyDescriptor(source, key);\n        if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {\n            throw new TypeError(`Cannot redefine property: ${String(key)}`);\n        }\n    }\n}\nfunction newObjectInRealm(globalObject, object) {\n    const ctorRegistry = initCtorRegistry(globalObject);\n    return Object.defineProperties(Object.create(ctorRegistry[\"%Object.prototype%\"]), Object.getOwnPropertyDescriptors(object));\n}\nconst wrapperSymbol = Symbol(\"wrapper\");\nconst implSymbol = Symbol(\"impl\");\nconst sameObjectCaches = Symbol(\"SameObject caches\");\nconst ctorRegistrySymbol = Symbol.for(\"[webidl2js] constructor registry\");\nconst AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);\nfunction initCtorRegistry(globalObject) {\n    if (hasOwn(globalObject, ctorRegistrySymbol)) {\n        return globalObject[ctorRegistrySymbol];\n    }\n    const ctorRegistry = Object.create(null);\n    // In addition to registering all the WebIDL2JS-generated types in the constructor registry,\n    // we also register a few intrinsics that we make use of in generated code, since they are not\n    // easy to grab from the globalObject variable.\n    ctorRegistry[\"%Object.prototype%\"] = globalObject.Object.prototype;\n    ctorRegistry[\"%IteratorPrototype%\"] = Object.getPrototypeOf(Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]()));\n    try {\n        ctorRegistry[\"%AsyncIteratorPrototype%\"] = Object.getPrototypeOf(Object.getPrototypeOf(globalObject.eval(\"(async function* () {})\").prototype));\n    } catch  {\n        ctorRegistry[\"%AsyncIteratorPrototype%\"] = AsyncIteratorPrototype;\n    }\n    globalObject[ctorRegistrySymbol] = ctorRegistry;\n    return ctorRegistry;\n}\nfunction getSameObject(wrapper, prop, creator) {\n    if (!wrapper[sameObjectCaches]) {\n        wrapper[sameObjectCaches] = Object.create(null);\n    }\n    if (prop in wrapper[sameObjectCaches]) {\n        return wrapper[sameObjectCaches][prop];\n    }\n    wrapper[sameObjectCaches][prop] = creator();\n    return wrapper[sameObjectCaches][prop];\n}\nfunction wrapperForImpl(impl) {\n    return impl ? impl[wrapperSymbol] : null;\n}\nfunction implForWrapper(wrapper) {\n    return wrapper ? wrapper[implSymbol] : null;\n}\nfunction tryWrapperForImpl(impl) {\n    const wrapper = wrapperForImpl(impl);\n    return wrapper ? wrapper : impl;\n}\nfunction tryImplForWrapper(wrapper) {\n    const impl = implForWrapper(wrapper);\n    return impl ? impl : wrapper;\n}\nconst iterInternalSymbol = Symbol(\"internal\");\nfunction isArrayIndexPropName(P) {\n    if (typeof P !== \"string\") {\n        return false;\n    }\n    const i = P >>> 0;\n    if (i === 2 ** 32 - 1) {\n        return false;\n    }\n    const s = `${i}`;\n    if (P !== s) {\n        return false;\n    }\n    return true;\n}\nconst byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nfunction isArrayBuffer(value) {\n    try {\n        byteLengthGetter.call(value);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction iteratorResult([key, value], kind) {\n    let result;\n    switch(kind){\n        case \"key\":\n            result = key;\n            break;\n        case \"value\":\n            result = value;\n            break;\n        case \"key+value\":\n            result = [\n                key,\n                value\n            ];\n            break;\n    }\n    return {\n        value: result,\n        done: false\n    };\n}\nconst supportsPropertyIndex = Symbol(\"supports property index\");\nconst supportedPropertyIndices = Symbol(\"supported property indices\");\nconst supportsPropertyName = Symbol(\"supports property name\");\nconst supportedPropertyNames = Symbol(\"supported property names\");\nconst indexedGet = Symbol(\"indexed property get\");\nconst indexedSetNew = Symbol(\"indexed property set new\");\nconst indexedSetExisting = Symbol(\"indexed property set existing\");\nconst namedGet = Symbol(\"named property get\");\nconst namedSetNew = Symbol(\"named property set new\");\nconst namedSetExisting = Symbol(\"named property set existing\");\nconst namedDelete = Symbol(\"named property delete\");\nconst asyncIteratorNext = Symbol(\"async iterator get the next iteration result\");\nconst asyncIteratorReturn = Symbol(\"async iterator return steps\");\nconst asyncIteratorInit = Symbol(\"async iterator initialization steps\");\nconst asyncIteratorEOI = Symbol(\"async iterator end of iteration\");\nmodule.exports = exports = {\n    isObject,\n    hasOwn,\n    define,\n    newObjectInRealm,\n    wrapperSymbol,\n    implSymbol,\n    getSameObject,\n    ctorRegistrySymbol,\n    initCtorRegistry,\n    wrapperForImpl,\n    implForWrapper,\n    tryWrapperForImpl,\n    tryImplForWrapper,\n    iterInternalSymbol,\n    isArrayBuffer,\n    isArrayIndexPropName,\n    supportsPropertyIndex,\n    supportedPropertyIndices,\n    supportsPropertyName,\n    supportedPropertyNames,\n    indexedGet,\n    indexedSetNew,\n    indexedSetExisting,\n    namedGet,\n    namedSetNew,\n    namedSetExisting,\n    namedDelete,\n    asyncIteratorNext,\n    asyncIteratorReturn,\n    asyncIteratorInit,\n    asyncIteratorEOI,\n    iteratorResult\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixxREFBcUQ7QUFDckQsU0FBU0EsU0FBU0MsS0FBSztJQUNyQixPQUFPLE9BQVFBLFVBQVUsWUFBWUEsVUFBVSxRQUFTLE9BQU9BLFVBQVU7QUFDM0U7QUFFQSxNQUFNQyxTQUFTQyxTQUFTQyxTQUFTLENBQUNDLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxPQUFPSCxTQUFTLENBQUNJLGNBQWM7QUFFM0UsbUZBQW1GO0FBQ25GLCtEQUErRDtBQUMvRCxTQUFTQyxPQUFPQyxNQUFNLEVBQUVDLE1BQU07SUFDNUIsS0FBSyxNQUFNQyxPQUFPQyxRQUFRQyxPQUFPLENBQUNILFFBQVM7UUFDekMsTUFBTUksYUFBYUYsUUFBUUcsd0JBQXdCLENBQUNMLFFBQVFDO1FBQzVELElBQUlHLGNBQWMsQ0FBQ0YsUUFBUUksY0FBYyxDQUFDUCxRQUFRRSxLQUFLRyxhQUFhO1lBQ2xFLE1BQU0sSUFBSUcsVUFBVSxDQUFDLDBCQUEwQixFQUFFQyxPQUFPUCxLQUFLLENBQUM7UUFDaEU7SUFDRjtBQUNGO0FBRUEsU0FBU1EsaUJBQWlCQyxZQUFZLEVBQUVDLE1BQU07SUFDNUMsTUFBTUMsZUFBZUMsaUJBQWlCSDtJQUN0QyxPQUFPZCxPQUFPa0IsZ0JBQWdCLENBQzVCbEIsT0FBT21CLE1BQU0sQ0FBQ0gsWUFBWSxDQUFDLHFCQUFxQixHQUNoRGhCLE9BQU9vQix5QkFBeUIsQ0FBQ0w7QUFFckM7QUFFQSxNQUFNTSxnQkFBZ0JDLE9BQU87QUFDN0IsTUFBTUMsYUFBYUQsT0FBTztBQUMxQixNQUFNRSxtQkFBbUJGLE9BQU87QUFDaEMsTUFBTUcscUJBQXFCSCxPQUFPSSxHQUFHLENBQUM7QUFFdEMsTUFBTUMseUJBQXlCM0IsT0FBTzRCLGNBQWMsQ0FBQzVCLE9BQU80QixjQUFjLENBQUMsbUJBQW9CLEdBQUcvQixTQUFTO0FBRTNHLFNBQVNvQixpQkFBaUJILFlBQVk7SUFDcEMsSUFBSW5CLE9BQU9tQixjQUFjVyxxQkFBcUI7UUFDNUMsT0FBT1gsWUFBWSxDQUFDVyxtQkFBbUI7SUFDekM7SUFFQSxNQUFNVCxlQUFlaEIsT0FBT21CLE1BQU0sQ0FBQztJQUVuQyw0RkFBNEY7SUFDNUYsOEZBQThGO0lBQzlGLCtDQUErQztJQUMvQ0gsWUFBWSxDQUFDLHFCQUFxQixHQUFHRixhQUFhZCxNQUFNLENBQUNILFNBQVM7SUFDbEVtQixZQUFZLENBQUMsc0JBQXNCLEdBQUdoQixPQUFPNEIsY0FBYyxDQUN6RDVCLE9BQU80QixjQUFjLENBQUMsSUFBSWQsYUFBYWUsS0FBSyxFQUFFLENBQUNQLE9BQU9RLFFBQVEsQ0FBQztJQUdqRSxJQUFJO1FBQ0ZkLFlBQVksQ0FBQywyQkFBMkIsR0FBR2hCLE9BQU80QixjQUFjLENBQzlENUIsT0FBTzRCLGNBQWMsQ0FDbkJkLGFBQWFpQixJQUFJLENBQUMsMkJBQTJCbEMsU0FBUztJQUc1RCxFQUFFLE9BQU07UUFDTm1CLFlBQVksQ0FBQywyQkFBMkIsR0FBR1c7SUFDN0M7SUFFQWIsWUFBWSxDQUFDVyxtQkFBbUIsR0FBR1Q7SUFDbkMsT0FBT0E7QUFDVDtBQUVBLFNBQVNnQixjQUFjQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsT0FBTztJQUMzQyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1QsaUJBQWlCLEVBQUU7UUFDOUJTLE9BQU8sQ0FBQ1QsaUJBQWlCLEdBQUd4QixPQUFPbUIsTUFBTSxDQUFDO0lBQzVDO0lBRUEsSUFBSWUsUUFBUUQsT0FBTyxDQUFDVCxpQkFBaUIsRUFBRTtRQUNyQyxPQUFPUyxPQUFPLENBQUNULGlCQUFpQixDQUFDVSxLQUFLO0lBQ3hDO0lBRUFELE9BQU8sQ0FBQ1QsaUJBQWlCLENBQUNVLEtBQUssR0FBR0M7SUFDbEMsT0FBT0YsT0FBTyxDQUFDVCxpQkFBaUIsQ0FBQ1UsS0FBSztBQUN4QztBQUVBLFNBQVNFLGVBQWVDLElBQUk7SUFDMUIsT0FBT0EsT0FBT0EsSUFBSSxDQUFDaEIsY0FBYyxHQUFHO0FBQ3RDO0FBRUEsU0FBU2lCLGVBQWVMLE9BQU87SUFDN0IsT0FBT0EsVUFBVUEsT0FBTyxDQUFDVixXQUFXLEdBQUc7QUFDekM7QUFFQSxTQUFTZ0Isa0JBQWtCRixJQUFJO0lBQzdCLE1BQU1KLFVBQVVHLGVBQWVDO0lBQy9CLE9BQU9KLFVBQVVBLFVBQVVJO0FBQzdCO0FBRUEsU0FBU0csa0JBQWtCUCxPQUFPO0lBQ2hDLE1BQU1JLE9BQU9DLGVBQWVMO0lBQzVCLE9BQU9JLE9BQU9BLE9BQU9KO0FBQ3ZCO0FBRUEsTUFBTVEscUJBQXFCbkIsT0FBTztBQUVsQyxTQUFTb0IscUJBQXFCQyxDQUFDO0lBQzdCLElBQUksT0FBT0EsTUFBTSxVQUFVO1FBQ3pCLE9BQU87SUFDVDtJQUNBLE1BQU1DLElBQUlELE1BQU07SUFDaEIsSUFBSUMsTUFBTSxLQUFLLEtBQUssR0FBRztRQUNyQixPQUFPO0lBQ1Q7SUFDQSxNQUFNQyxJQUFJLENBQUMsRUFBRUQsRUFBRSxDQUFDO0lBQ2hCLElBQUlELE1BQU1FLEdBQUc7UUFDWCxPQUFPO0lBQ1Q7SUFDQSxPQUFPO0FBQ1Q7QUFFQSxNQUFNQyxtQkFDRjlDLE9BQU9TLHdCQUF3QixDQUFDc0MsWUFBWWxELFNBQVMsRUFBRSxjQUFjbUQsR0FBRztBQUM1RSxTQUFTQyxjQUFjdkQsS0FBSztJQUMxQixJQUFJO1FBQ0ZvRCxpQkFBaUJoRCxJQUFJLENBQUNKO1FBQ3RCLE9BQU87SUFDVCxFQUFFLE9BQU93RCxHQUFHO1FBQ1YsT0FBTztJQUNUO0FBQ0Y7QUFFQSxTQUFTQyxlQUFlLENBQUM5QyxLQUFLWCxNQUFNLEVBQUUwRCxJQUFJO0lBQ3hDLElBQUlDO0lBQ0osT0FBUUQ7UUFDTixLQUFLO1lBQ0hDLFNBQVNoRDtZQUNUO1FBQ0YsS0FBSztZQUNIZ0QsU0FBUzNEO1lBQ1Q7UUFDRixLQUFLO1lBQ0gyRCxTQUFTO2dCQUFDaEQ7Z0JBQUtYO2FBQU07WUFDckI7SUFDSjtJQUNBLE9BQU87UUFBRUEsT0FBTzJEO1FBQVFDLE1BQU07SUFBTTtBQUN0QztBQUVBLE1BQU1DLHdCQUF3QmpDLE9BQU87QUFDckMsTUFBTWtDLDJCQUEyQmxDLE9BQU87QUFDeEMsTUFBTW1DLHVCQUF1Qm5DLE9BQU87QUFDcEMsTUFBTW9DLHlCQUF5QnBDLE9BQU87QUFDdEMsTUFBTXFDLGFBQWFyQyxPQUFPO0FBQzFCLE1BQU1zQyxnQkFBZ0J0QyxPQUFPO0FBQzdCLE1BQU11QyxxQkFBcUJ2QyxPQUFPO0FBQ2xDLE1BQU13QyxXQUFXeEMsT0FBTztBQUN4QixNQUFNeUMsY0FBY3pDLE9BQU87QUFDM0IsTUFBTTBDLG1CQUFtQjFDLE9BQU87QUFDaEMsTUFBTTJDLGNBQWMzQyxPQUFPO0FBRTNCLE1BQU00QyxvQkFBb0I1QyxPQUFPO0FBQ2pDLE1BQU02QyxzQkFBc0I3QyxPQUFPO0FBQ25DLE1BQU04QyxvQkFBb0I5QyxPQUFPO0FBQ2pDLE1BQU0rQyxtQkFBbUIvQyxPQUFPO0FBRWhDZ0QsT0FBT0MsT0FBTyxHQUFHQSxVQUFVO0lBQ3pCOUU7SUFDQUU7SUFDQU87SUFDQVc7SUFDQVE7SUFDQUU7SUFDQVM7SUFDQVA7SUFDQVI7SUFDQW1CO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FRO0lBQ0FQO0lBQ0FhO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGFjdC1jZW50ZXIvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXRpbHMuanM/YTUzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gUmV0dXJucyBcIlR5cGUodmFsdWUpIGlzIE9iamVjdFwiIGluIEVTIHRlcm1pbm9sb2d5LlxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5jb25zdCBoYXNPd24gPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuXG4vLyBMaWtlIGBPYmplY3QuYXNzaWduYCwgYnV0IHVzaW5nIGBbW0dldE93blByb3BlcnR5XV1gIGFuZCBgW1tEZWZpbmVPd25Qcm9wZXJ0eV1dYFxuLy8gaW5zdGVhZCBvZiBgW1tHZXRdXWAgYW5kIGBbW1NldF1dYCBhbmQgb25seSBhbGxvd2luZyBvYmplY3RzXG5mdW5jdGlvbiBkZWZpbmUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgZm9yIChjb25zdCBrZXkgb2YgUmVmbGVjdC5vd25LZXlzKHNvdXJjZSkpIHtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpO1xuICAgIGlmIChkZXNjcmlwdG9yICYmICFSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQ2Fubm90IHJlZGVmaW5lIHByb3BlcnR5OiAke1N0cmluZyhrZXkpfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBuZXdPYmplY3RJblJlYWxtKGdsb2JhbE9iamVjdCwgb2JqZWN0KSB7XG4gIGNvbnN0IGN0b3JSZWdpc3RyeSA9IGluaXRDdG9yUmVnaXN0cnkoZ2xvYmFsT2JqZWN0KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIE9iamVjdC5jcmVhdGUoY3RvclJlZ2lzdHJ5W1wiJU9iamVjdC5wcm90b3R5cGUlXCJdKSxcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpXG4gICk7XG59XG5cbmNvbnN0IHdyYXBwZXJTeW1ib2wgPSBTeW1ib2woXCJ3cmFwcGVyXCIpO1xuY29uc3QgaW1wbFN5bWJvbCA9IFN5bWJvbChcImltcGxcIik7XG5jb25zdCBzYW1lT2JqZWN0Q2FjaGVzID0gU3ltYm9sKFwiU2FtZU9iamVjdCBjYWNoZXNcIik7XG5jb25zdCBjdG9yUmVnaXN0cnlTeW1ib2wgPSBTeW1ib2wuZm9yKFwiW3dlYmlkbDJqc10gY29uc3RydWN0b3IgcmVnaXN0cnlcIik7XG5cbmNvbnN0IEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKGFzeW5jIGZ1bmN0aW9uKiAoKSB7fSkucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gaW5pdEN0b3JSZWdpc3RyeShnbG9iYWxPYmplY3QpIHtcbiAgaWYgKGhhc093bihnbG9iYWxPYmplY3QsIGN0b3JSZWdpc3RyeVN5bWJvbCkpIHtcbiAgICByZXR1cm4gZ2xvYmFsT2JqZWN0W2N0b3JSZWdpc3RyeVN5bWJvbF07XG4gIH1cblxuICBjb25zdCBjdG9yUmVnaXN0cnkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vIEluIGFkZGl0aW9uIHRvIHJlZ2lzdGVyaW5nIGFsbCB0aGUgV2ViSURMMkpTLWdlbmVyYXRlZCB0eXBlcyBpbiB0aGUgY29uc3RydWN0b3IgcmVnaXN0cnksXG4gIC8vIHdlIGFsc28gcmVnaXN0ZXIgYSBmZXcgaW50cmluc2ljcyB0aGF0IHdlIG1ha2UgdXNlIG9mIGluIGdlbmVyYXRlZCBjb2RlLCBzaW5jZSB0aGV5IGFyZSBub3RcbiAgLy8gZWFzeSB0byBncmFiIGZyb20gdGhlIGdsb2JhbE9iamVjdCB2YXJpYWJsZS5cbiAgY3RvclJlZ2lzdHJ5W1wiJU9iamVjdC5wcm90b3R5cGUlXCJdID0gZ2xvYmFsT2JqZWN0Lk9iamVjdC5wcm90b3R5cGU7XG4gIGN0b3JSZWdpc3RyeVtcIiVJdGVyYXRvclByb3RvdHlwZSVcIl0gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoXG4gICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBnbG9iYWxPYmplY3QuQXJyYXkoKVtTeW1ib2wuaXRlcmF0b3JdKCkpXG4gICk7XG5cbiAgdHJ5IHtcbiAgICBjdG9yUmVnaXN0cnlbXCIlQXN5bmNJdGVyYXRvclByb3RvdHlwZSVcIl0gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoXG4gICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoXG4gICAgICAgIGdsb2JhbE9iamVjdC5ldmFsKFwiKGFzeW5jIGZ1bmN0aW9uKiAoKSB7fSlcIikucHJvdG90eXBlXG4gICAgICApXG4gICAgKTtcbiAgfSBjYXRjaCB7XG4gICAgY3RvclJlZ2lzdHJ5W1wiJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlXCJdID0gQXN5bmNJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIGdsb2JhbE9iamVjdFtjdG9yUmVnaXN0cnlTeW1ib2xdID0gY3RvclJlZ2lzdHJ5O1xuICByZXR1cm4gY3RvclJlZ2lzdHJ5O1xufVxuXG5mdW5jdGlvbiBnZXRTYW1lT2JqZWN0KHdyYXBwZXIsIHByb3AsIGNyZWF0b3IpIHtcbiAgaWYgKCF3cmFwcGVyW3NhbWVPYmplY3RDYWNoZXNdKSB7XG4gICAgd3JhcHBlcltzYW1lT2JqZWN0Q2FjaGVzXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBpZiAocHJvcCBpbiB3cmFwcGVyW3NhbWVPYmplY3RDYWNoZXNdKSB7XG4gICAgcmV0dXJuIHdyYXBwZXJbc2FtZU9iamVjdENhY2hlc11bcHJvcF07XG4gIH1cblxuICB3cmFwcGVyW3NhbWVPYmplY3RDYWNoZXNdW3Byb3BdID0gY3JlYXRvcigpO1xuICByZXR1cm4gd3JhcHBlcltzYW1lT2JqZWN0Q2FjaGVzXVtwcm9wXTtcbn1cblxuZnVuY3Rpb24gd3JhcHBlckZvckltcGwoaW1wbCkge1xuICByZXR1cm4gaW1wbCA/IGltcGxbd3JhcHBlclN5bWJvbF0gOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpbXBsRm9yV3JhcHBlcih3cmFwcGVyKSB7XG4gIHJldHVybiB3cmFwcGVyID8gd3JhcHBlcltpbXBsU3ltYm9sXSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHRyeVdyYXBwZXJGb3JJbXBsKGltcGwpIHtcbiAgY29uc3Qgd3JhcHBlciA9IHdyYXBwZXJGb3JJbXBsKGltcGwpO1xuICByZXR1cm4gd3JhcHBlciA/IHdyYXBwZXIgOiBpbXBsO1xufVxuXG5mdW5jdGlvbiB0cnlJbXBsRm9yV3JhcHBlcih3cmFwcGVyKSB7XG4gIGNvbnN0IGltcGwgPSBpbXBsRm9yV3JhcHBlcih3cmFwcGVyKTtcbiAgcmV0dXJuIGltcGwgPyBpbXBsIDogd3JhcHBlcjtcbn1cblxuY29uc3QgaXRlckludGVybmFsU3ltYm9sID0gU3ltYm9sKFwiaW50ZXJuYWxcIik7XG5cbmZ1bmN0aW9uIGlzQXJyYXlJbmRleFByb3BOYW1lKFApIHtcbiAgaWYgKHR5cGVvZiBQICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGkgPSBQID4+PiAwO1xuICBpZiAoaSA9PT0gMiAqKiAzMiAtIDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgcyA9IGAke2l9YDtcbiAgaWYgKFAgIT09IHMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmNvbnN0IGJ5dGVMZW5ndGhHZXR0ZXIgPVxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoQXJyYXlCdWZmZXIucHJvdG90eXBlLCBcImJ5dGVMZW5ndGhcIikuZ2V0O1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICB0cnkge1xuICAgIGJ5dGVMZW5ndGhHZXR0ZXIuY2FsbCh2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXRlcmF0b3JSZXN1bHQoW2tleSwgdmFsdWVdLCBraW5kKSB7XG4gIGxldCByZXN1bHQ7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgXCJrZXlcIjpcbiAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwia2V5K3ZhbHVlXCI6XG4gICAgICByZXN1bHQgPSBba2V5LCB2YWx1ZV07XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4geyB2YWx1ZTogcmVzdWx0LCBkb25lOiBmYWxzZSB9O1xufVxuXG5jb25zdCBzdXBwb3J0c1Byb3BlcnR5SW5kZXggPSBTeW1ib2woXCJzdXBwb3J0cyBwcm9wZXJ0eSBpbmRleFwiKTtcbmNvbnN0IHN1cHBvcnRlZFByb3BlcnR5SW5kaWNlcyA9IFN5bWJvbChcInN1cHBvcnRlZCBwcm9wZXJ0eSBpbmRpY2VzXCIpO1xuY29uc3Qgc3VwcG9ydHNQcm9wZXJ0eU5hbWUgPSBTeW1ib2woXCJzdXBwb3J0cyBwcm9wZXJ0eSBuYW1lXCIpO1xuY29uc3Qgc3VwcG9ydGVkUHJvcGVydHlOYW1lcyA9IFN5bWJvbChcInN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lc1wiKTtcbmNvbnN0IGluZGV4ZWRHZXQgPSBTeW1ib2woXCJpbmRleGVkIHByb3BlcnR5IGdldFwiKTtcbmNvbnN0IGluZGV4ZWRTZXROZXcgPSBTeW1ib2woXCJpbmRleGVkIHByb3BlcnR5IHNldCBuZXdcIik7XG5jb25zdCBpbmRleGVkU2V0RXhpc3RpbmcgPSBTeW1ib2woXCJpbmRleGVkIHByb3BlcnR5IHNldCBleGlzdGluZ1wiKTtcbmNvbnN0IG5hbWVkR2V0ID0gU3ltYm9sKFwibmFtZWQgcHJvcGVydHkgZ2V0XCIpO1xuY29uc3QgbmFtZWRTZXROZXcgPSBTeW1ib2woXCJuYW1lZCBwcm9wZXJ0eSBzZXQgbmV3XCIpO1xuY29uc3QgbmFtZWRTZXRFeGlzdGluZyA9IFN5bWJvbChcIm5hbWVkIHByb3BlcnR5IHNldCBleGlzdGluZ1wiKTtcbmNvbnN0IG5hbWVkRGVsZXRlID0gU3ltYm9sKFwibmFtZWQgcHJvcGVydHkgZGVsZXRlXCIpO1xuXG5jb25zdCBhc3luY0l0ZXJhdG9yTmV4dCA9IFN5bWJvbChcImFzeW5jIGl0ZXJhdG9yIGdldCB0aGUgbmV4dCBpdGVyYXRpb24gcmVzdWx0XCIpO1xuY29uc3QgYXN5bmNJdGVyYXRvclJldHVybiA9IFN5bWJvbChcImFzeW5jIGl0ZXJhdG9yIHJldHVybiBzdGVwc1wiKTtcbmNvbnN0IGFzeW5jSXRlcmF0b3JJbml0ID0gU3ltYm9sKFwiYXN5bmMgaXRlcmF0b3IgaW5pdGlhbGl6YXRpb24gc3RlcHNcIik7XG5jb25zdCBhc3luY0l0ZXJhdG9yRU9JID0gU3ltYm9sKFwiYXN5bmMgaXRlcmF0b3IgZW5kIG9mIGl0ZXJhdGlvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0ge1xuICBpc09iamVjdCxcbiAgaGFzT3duLFxuICBkZWZpbmUsXG4gIG5ld09iamVjdEluUmVhbG0sXG4gIHdyYXBwZXJTeW1ib2wsXG4gIGltcGxTeW1ib2wsXG4gIGdldFNhbWVPYmplY3QsXG4gIGN0b3JSZWdpc3RyeVN5bWJvbCxcbiAgaW5pdEN0b3JSZWdpc3RyeSxcbiAgd3JhcHBlckZvckltcGwsXG4gIGltcGxGb3JXcmFwcGVyLFxuICB0cnlXcmFwcGVyRm9ySW1wbCxcbiAgdHJ5SW1wbEZvcldyYXBwZXIsXG4gIGl0ZXJJbnRlcm5hbFN5bWJvbCxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNBcnJheUluZGV4UHJvcE5hbWUsXG4gIHN1cHBvcnRzUHJvcGVydHlJbmRleCxcbiAgc3VwcG9ydGVkUHJvcGVydHlJbmRpY2VzLFxuICBzdXBwb3J0c1Byb3BlcnR5TmFtZSxcbiAgc3VwcG9ydGVkUHJvcGVydHlOYW1lcyxcbiAgaW5kZXhlZEdldCxcbiAgaW5kZXhlZFNldE5ldyxcbiAgaW5kZXhlZFNldEV4aXN0aW5nLFxuICBuYW1lZEdldCxcbiAgbmFtZWRTZXROZXcsXG4gIG5hbWVkU2V0RXhpc3RpbmcsXG4gIG5hbWVkRGVsZXRlLFxuICBhc3luY0l0ZXJhdG9yTmV4dCxcbiAgYXN5bmNJdGVyYXRvclJldHVybixcbiAgYXN5bmNJdGVyYXRvckluaXQsXG4gIGFzeW5jSXRlcmF0b3JFT0ksXG4gIGl0ZXJhdG9yUmVzdWx0XG59O1xuIl0sIm5hbWVzIjpbImlzT2JqZWN0IiwidmFsdWUiLCJoYXNPd24iLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImNhbGwiLCJiaW5kIiwiT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJkZWZpbmUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJrZXkiLCJSZWZsZWN0Iiwib3duS2V5cyIsImRlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsIlR5cGVFcnJvciIsIlN0cmluZyIsIm5ld09iamVjdEluUmVhbG0iLCJnbG9iYWxPYmplY3QiLCJvYmplY3QiLCJjdG9yUmVnaXN0cnkiLCJpbml0Q3RvclJlZ2lzdHJ5IiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJ3cmFwcGVyU3ltYm9sIiwiU3ltYm9sIiwiaW1wbFN5bWJvbCIsInNhbWVPYmplY3RDYWNoZXMiLCJjdG9yUmVnaXN0cnlTeW1ib2wiLCJmb3IiLCJBc3luY0l0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJBcnJheSIsIml0ZXJhdG9yIiwiZXZhbCIsImdldFNhbWVPYmplY3QiLCJ3cmFwcGVyIiwicHJvcCIsImNyZWF0b3IiLCJ3cmFwcGVyRm9ySW1wbCIsImltcGwiLCJpbXBsRm9yV3JhcHBlciIsInRyeVdyYXBwZXJGb3JJbXBsIiwidHJ5SW1wbEZvcldyYXBwZXIiLCJpdGVySW50ZXJuYWxTeW1ib2wiLCJpc0FycmF5SW5kZXhQcm9wTmFtZSIsIlAiLCJpIiwicyIsImJ5dGVMZW5ndGhHZXR0ZXIiLCJBcnJheUJ1ZmZlciIsImdldCIsImlzQXJyYXlCdWZmZXIiLCJlIiwiaXRlcmF0b3JSZXN1bHQiLCJraW5kIiwicmVzdWx0IiwiZG9uZSIsInN1cHBvcnRzUHJvcGVydHlJbmRleCIsInN1cHBvcnRlZFByb3BlcnR5SW5kaWNlcyIsInN1cHBvcnRzUHJvcGVydHlOYW1lIiwic3VwcG9ydGVkUHJvcGVydHlOYW1lcyIsImluZGV4ZWRHZXQiLCJpbmRleGVkU2V0TmV3IiwiaW5kZXhlZFNldEV4aXN0aW5nIiwibmFtZWRHZXQiLCJuYW1lZFNldE5ldyIsIm5hbWVkU2V0RXhpc3RpbmciLCJuYW1lZERlbGV0ZSIsImFzeW5jSXRlcmF0b3JOZXh0IiwiYXN5bmNJdGVyYXRvclJldHVybiIsImFzeW5jSXRlcmF0b3JJbml0IiwiYXN5bmNJdGVyYXRvckVPSSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/webidl2js-wrapper.js":
/*!******************************************************!*\
  !*** ./node_modules/whatwg-url/webidl2js-wrapper.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst URL = __webpack_require__(/*! ./lib/URL */ \"(ssr)/./node_modules/whatwg-url/lib/URL.js\");\nconst URLSearchParams = __webpack_require__(/*! ./lib/URLSearchParams */ \"(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js\");\nexports.URL = URL;\nexports.URLSearchParams = URLSearchParams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC93ZWJpZGwyanMtd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLE1BQU1BLE1BQU1DLG1CQUFPQSxDQUFDLDZEQUFXO0FBQy9CLE1BQU1DLGtCQUFrQkQsbUJBQU9BLENBQUMscUZBQXVCO0FBRXZERSxXQUFXLEdBQUdIO0FBQ2RHLHVCQUF1QixHQUFHRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRhY3QtY2VudGVyLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvd2ViaWRsMmpzLXdyYXBwZXIuanM/Y2RiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVVJMID0gcmVxdWlyZShcIi4vbGliL1VSTFwiKTtcbmNvbnN0IFVSTFNlYXJjaFBhcmFtcyA9IHJlcXVpcmUoXCIuL2xpYi9VUkxTZWFyY2hQYXJhbXNcIik7XG5cbmV4cG9ydHMuVVJMID0gVVJMO1xuZXhwb3J0cy5VUkxTZWFyY2hQYXJhbXMgPSBVUkxTZWFyY2hQYXJhbXM7XG4iXSwibmFtZXMiOlsiVVJMIiwicmVxdWlyZSIsIlVSTFNlYXJjaFBhcmFtcyIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/webidl2js-wrapper.js\n");

/***/ })

};
;