"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/w3c-xmlserializer";
exports.ids = ["vendor-chunks/w3c-xmlserializer"];
exports.modules = {

/***/ "(ssr)/./node_modules/w3c-xmlserializer/lib/attributes.js":
/*!**********************************************************!*\
  !*** ./node_modules/w3c-xmlserializer/lib/attributes.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst xnv = __webpack_require__(/*! xml-name-validator */ \"(ssr)/./node_modules/xml-name-validator/lib/xml-name-validator.js\");\nconst { NAMESPACES } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js\");\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n    const generatedPrefix = `ns${prefixIndex}`;\n    map[newNamespace] = [\n        generatedPrefix\n    ];\n    return generatedPrefix;\n}\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n    const candidateList = map[ns];\n    if (!candidateList) {\n        return null;\n    }\n    if (candidateList.includes(preferredPrefix)) {\n        return preferredPrefix;\n    }\n    return candidateList[candidateList.length - 1];\n}\nfunction serializeAttributeValue(value /* , requireWellFormed*/ ) {\n    if (value === null) {\n        return \"\";\n    }\n    // TODO: Check well-formedness\n    return value.replace(/&/ug, \"&amp;\").replace(/\"/ug, \"&quot;\").replace(/</ug, \"&lt;\").replace(/>/ug, \"&gt;\").replace(/\\t/ug, \"&#x9;\").replace(/\\n/ug, \"&#xA;\").replace(/\\r/ug, \"&#xD;\");\n}\nfunction serializeAttributes(element, map, localPrefixes, ignoreNamespaceDefAttr, requireWellFormed, refs) {\n    let result = \"\";\n    const namespaceLocalnames = Object.create(null);\n    for (const attr of element.attributes){\n        if (requireWellFormed && namespaceLocalnames[attr.namespaceURI] && namespaceLocalnames[attr.namespaceURI].has(attr.localName)) {\n            throw new Error(\"Found duplicated attribute\");\n        }\n        if (!namespaceLocalnames[attr.namespaceURI]) {\n            namespaceLocalnames[attr.namespaceURI] = new Set();\n        }\n        namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n        const attributeNamespace = attr.namespaceURI;\n        let candidatePrefix = null;\n        if (attributeNamespace !== null) {\n            candidatePrefix = preferredPrefixString(map, attributeNamespace, attr.prefix);\n            if (attributeNamespace === NAMESPACES.XMLNS) {\n                if (attr.value === NAMESPACES.XML || attr.prefix === null && ignoreNamespaceDefAttr || attr.prefix !== null && localPrefixes[attr.localName] !== attr.value && map[attr.value].includes(attr.localName)) {\n                    continue;\n                }\n                if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n                    throw new Error(\"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\");\n                }\n                if (requireWellFormed && attr.value === \"\") {\n                    throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace\");\n                }\n                if (attr.prefix === \"xmlns\") {\n                    candidatePrefix = \"xmlns\";\n                }\n            } else if (candidatePrefix === null) {\n                candidatePrefix = generatePrefix(map, attributeNamespace, refs.prefixIndex++);\n                result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(attributeNamespace, requireWellFormed)}\"`;\n            }\n        }\n        result += \" \";\n        if (candidatePrefix !== null) {\n            result += `${candidatePrefix}:`;\n        }\n        if (requireWellFormed && (attr.localName.includes(\":\") || !xnv.name(attr.localName) || attr.localName === \"xmlns\" && attributeNamespace === null)) {\n            throw new Error(\"Invalid attribute localName value\");\n        }\n        result += `${attr.localName}=\"${serializeAttributeValue(attr.value, requireWellFormed)}\"`;\n    }\n    return result;\n}\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/w3c-xmlserializer/lib/attributes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/w3c-xmlserializer/lib/constants.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nmodule.exports.NAMESPACES = {\n    HTML: \"http://www.w3.org/1999/xhtml\",\n    XML: \"http://www.w3.org/XML/1998/namespace\",\n    XMLNS: \"http://www.w3.org/2000/xmlns/\"\n};\nmodule.exports.NODE_TYPES = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12 // historical\n};\nmodule.exports.VOID_ELEMENTS = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"bgsound\",\n    \"br\",\n    \"col\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"keygen\",\n    \"link\",\n    \"menuitem\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdzNjLXhtbHNlcmlhbGl6ZXIvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSx5QkFBeUIsR0FBRztJQUMxQkcsTUFBTTtJQUNOQyxLQUFLO0lBQ0xDLE9BQU87QUFDVDtBQUVBTCx5QkFBeUIsR0FBRztJQUMxQk8sY0FBYztJQUNkQyxnQkFBZ0I7SUFDaEJDLFdBQVc7SUFDWEMsb0JBQW9CO0lBQ3BCQyx1QkFBdUI7SUFDdkJDLGFBQWE7SUFDYkMsNkJBQTZCO0lBQzdCQyxjQUFjO0lBQ2RDLGVBQWU7SUFDZkMsb0JBQW9CO0lBQ3BCQyx3QkFBd0I7SUFDeEJDLGVBQWUsR0FBRyxhQUFhO0FBQ2pDO0FBRUFsQiw0QkFBNEIsR0FBRyxJQUFJb0IsSUFBSTtJQUNyQztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGFjdC1jZW50ZXIvLi9ub2RlX21vZHVsZXMvdzNjLXhtbHNlcmlhbGl6ZXIvbGliL2NvbnN0YW50cy5qcz8wYTMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cy5OQU1FU1BBQ0VTID0ge1xuICBIVE1MOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcbiAgWE1MOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICBYTUxOUzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuXG5tb2R1bGUuZXhwb3J0cy5OT0RFX1RZUEVTID0ge1xuICBFTEVNRU5UX05PREU6IDEsXG4gIEFUVFJJQlVURV9OT0RFOiAyLCAvLyBoaXN0b3JpY2FsXG4gIFRFWFRfTk9ERTogMyxcbiAgQ0RBVEFfU0VDVElPTl9OT0RFOiA0LFxuICBFTlRJVFlfUkVGRVJFTkNFX05PREU6IDUsIC8vIGhpc3RvcmljYWxcbiAgRU5USVRZX05PREU6IDYsIC8vIGhpc3RvcmljYWxcbiAgUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOiA3LFxuICBDT01NRU5UX05PREU6IDgsXG4gIERPQ1VNRU5UX05PREU6IDksXG4gIERPQ1VNRU5UX1RZUEVfTk9ERTogMTAsXG4gIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6IDExLFxuICBOT1RBVElPTl9OT0RFOiAxMiAvLyBoaXN0b3JpY2FsXG59O1xuXG5tb2R1bGUuZXhwb3J0cy5WT0lEX0VMRU1FTlRTID0gbmV3IFNldChbXG4gIFwiYXJlYVwiLFxuICBcImJhc2VcIixcbiAgXCJiYXNlZm9udFwiLFxuICBcImJnc291bmRcIixcbiAgXCJiclwiLFxuICBcImNvbFwiLFxuICBcImVtYmVkXCIsXG4gIFwiZnJhbWVcIixcbiAgXCJoclwiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwia2V5Z2VuXCIsXG4gIFwibGlua1wiLFxuICBcIm1lbnVpdGVtXCIsXG4gIFwibWV0YVwiLFxuICBcInBhcmFtXCIsXG4gIFwic291cmNlXCIsXG4gIFwidHJhY2tcIixcbiAgXCJ3YnJcIlxuXSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIk5BTUVTUEFDRVMiLCJIVE1MIiwiWE1MIiwiWE1MTlMiLCJOT0RFX1RZUEVTIiwiRUxFTUVOVF9OT0RFIiwiQVRUUklCVVRFX05PREUiLCJURVhUX05PREUiLCJDREFUQV9TRUNUSU9OX05PREUiLCJFTlRJVFlfUkVGRVJFTkNFX05PREUiLCJFTlRJVFlfTk9ERSIsIlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSIsIkNPTU1FTlRfTk9ERSIsIkRPQ1VNRU5UX05PREUiLCJET0NVTUVOVF9UWVBFX05PREUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiTk9UQVRJT05fTk9ERSIsIlZPSURfRUxFTUVOVFMiLCJTZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/w3c-xmlserializer/lib/serialize.js":
/*!*********************************************************!*\
  !*** ./node_modules/w3c-xmlserializer/lib/serialize.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst xnv = __webpack_require__(/*! xml-name-validator */ \"(ssr)/./node_modules/xml-name-validator/lib/xml-name-validator.js\");\nconst attributeUtils = __webpack_require__(/*! ./attributes */ \"(ssr)/./node_modules/w3c-xmlserializer/lib/attributes.js\");\nconst { NAMESPACES, VOID_ELEMENTS, NODE_TYPES } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/w3c-xmlserializer/lib/constants.js\");\nconst XML_CHAR = /^(\\x09|\\x0A|\\x0D|[\\x20-\\uD7FF]|[\\uE000-\\uFFFD]|[\\u{10000}-\\u{10FFFF}])*$/u;\nconst PUBID_CHAR = /^(\\x20|\\x0D|\\x0A|[a-zA-Z0-9]|[-'()+,./:=?;!*#@$_%])*$/u;\nfunction asciiCaseInsensitiveMatch(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for(let i = 0; i < a.length; ++i){\n        if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction recordNamespaceInformation(element, map, prefixMap) {\n    let defaultNamespaceAttrValue = null;\n    for(let i = 0; i < element.attributes.length; ++i){\n        const attr = element.attributes[i];\n        if (attr.namespaceURI === NAMESPACES.XMLNS) {\n            if (attr.prefix === null) {\n                defaultNamespaceAttrValue = attr.value;\n                continue;\n            }\n            let namespaceDefinition = attr.value;\n            if (namespaceDefinition === NAMESPACES.XML) {\n                continue;\n            }\n            // This is exactly the other way than the spec says, but that's intended.\n            // All the maps coalesce null to the empty string (explained in the\n            // spec), so instead of doing that every time, just do it once here.\n            if (namespaceDefinition === null) {\n                namespaceDefinition = \"\";\n            }\n            if (namespaceDefinition in map && map[namespaceDefinition].includes(attr.localName)) {\n                continue;\n            }\n            if (!(namespaceDefinition in map)) {\n                map[namespaceDefinition] = [];\n            }\n            map[namespaceDefinition].push(attr.localName);\n            prefixMap[attr.localName] = namespaceDefinition;\n        }\n    }\n    return defaultNamespaceAttrValue;\n}\nfunction serializeDocumentType(node, namespace, prefixMap, requireWellFormed) {\n    if (requireWellFormed && !PUBID_CHAR.test(node.publicId)) {\n        throw new Error(\"Failed to serialize XML: document type node publicId is not well-formed.\");\n    }\n    if (requireWellFormed && (!XML_CHAR.test(node.systemId) || node.systemId.includes('\"') && node.systemId.includes(\"'\"))) {\n        throw new Error(\"Failed to serialize XML: document type node systemId is not well-formed.\");\n    }\n    let markup = `<!DOCTYPE ${node.name}`;\n    if (node.publicId !== \"\") {\n        markup += ` PUBLIC \"${node.publicId}\"`;\n    } else if (node.systemId !== \"\") {\n        markup += \" SYSTEM\";\n    }\n    if (node.systemId !== \"\") {\n        markup += ` \"${node.systemId}\"`;\n    }\n    return `${markup}>`;\n}\nfunction serializeProcessingInstruction(node, namespace, prefixMap, requireWellFormed) {\n    if (requireWellFormed && (node.target.includes(\":\") || asciiCaseInsensitiveMatch(node.target, \"xml\"))) {\n        throw new Error(\"Failed to serialize XML: processing instruction node target is not well-formed.\");\n    }\n    if (requireWellFormed && (!XML_CHAR.test(node.data) || node.data.includes(\"?>\"))) {\n        throw new Error(\"Failed to serialize XML: processing instruction node data is not well-formed.\");\n    }\n    return `<?${node.target} ${node.data}?>`;\n}\nfunction serializeDocument(node, namespace, prefixMap, requireWellFormed, refs) {\n    if (requireWellFormed && node.documentElement === null) {\n        throw new Error(\"Failed to serialize XML: document does not have a document element.\");\n    }\n    let serializedDocument = \"\";\n    for (const child of node.childNodes){\n        serializedDocument += xmlSerialization(child, namespace, prefixMap, requireWellFormed, refs);\n    }\n    return serializedDocument;\n}\nfunction serializeDocumentFragment(node, namespace, prefixMap, requireWellFormed, refs) {\n    let markup = \"\";\n    for (const child of node.childNodes){\n        markup += xmlSerialization(child, namespace, prefixMap, requireWellFormed, refs);\n    }\n    return markup;\n}\nfunction serializeText(node, namespace, prefixMap, requireWellFormed) {\n    if (requireWellFormed && !XML_CHAR.test(node.data)) {\n        throw new Error(\"Failed to serialize XML: text node data is not well-formed.\");\n    }\n    return node.data.replace(/&/ug, \"&amp;\").replace(/</ug, \"&lt;\").replace(/>/ug, \"&gt;\");\n}\nfunction serializeComment(node, namespace, prefixMap, requireWellFormed) {\n    if (requireWellFormed && !XML_CHAR.test(node.data)) {\n        throw new Error(\"Failed to serialize XML: comment node data is not well-formed.\");\n    }\n    if (requireWellFormed && (node.data.includes(\"--\") || node.data.endsWith(\"-\"))) {\n        throw new Error(\"Failed to serialize XML: found hyphens in illegal places in comment node data.\");\n    }\n    return `<!--${node.data}-->`;\n}\nfunction serializeElement(node, namespace, prefixMap, requireWellFormed, refs) {\n    if (requireWellFormed && (node.localName.includes(\":\") || !xnv.name(node.localName))) {\n        throw new Error(\"Failed to serialize XML: element node localName is not a valid XML name.\");\n    }\n    let markup = \"<\";\n    let qualifiedName = \"\";\n    let skipEndTag = false;\n    let ignoreNamespaceDefinitionAttr = false;\n    const map = {\n        ...prefixMap\n    };\n    const localPrefixesMap = Object.create(null);\n    const localDefaultNamespace = recordNamespaceInformation(node, map, localPrefixesMap);\n    let inheritedNs = namespace;\n    const ns = node.namespaceURI;\n    if (inheritedNs === ns) {\n        if (localDefaultNamespace !== null) {\n            ignoreNamespaceDefinitionAttr = true;\n        }\n        if (ns === NAMESPACES.XML) {\n            qualifiedName = `xml:${node.localName}`;\n        } else {\n            qualifiedName = node.localName;\n        }\n        markup += qualifiedName;\n    } else {\n        let { prefix } = node;\n        let candidatePrefix = attributeUtils.preferredPrefixString(map, ns, prefix);\n        if (prefix === \"xmlns\") {\n            if (requireWellFormed) {\n                throw new Error('Failed to serialize XML: element nodes can\\'t have a prefix of \"xmlns\".');\n            }\n            candidatePrefix = \"xmlns\";\n        }\n        if (candidatePrefix !== null) {\n            qualifiedName = `${candidatePrefix}:${node.localName}`;\n            if (localDefaultNamespace !== null && localDefaultNamespace !== NAMESPACES.XML) {\n                inheritedNs = localDefaultNamespace === \"\" ? null : localDefaultNamespace;\n            }\n            markup += qualifiedName;\n        } else if (prefix !== null) {\n            if (prefix in localPrefixesMap) {\n                prefix = attributeUtils.generatePrefix(map, ns, refs.prefixIndex++);\n            }\n            if (map[ns]) {\n                map[ns].push(prefix);\n            } else {\n                map[ns] = [\n                    prefix\n                ];\n            }\n            qualifiedName = `${prefix}:${node.localName}`;\n            markup += `${qualifiedName} xmlns:${prefix}=\"${attributeUtils.serializeAttributeValue(ns, requireWellFormed)}\"`;\n            if (localDefaultNamespace !== null) {\n                inheritedNs = localDefaultNamespace === \"\" ? null : localDefaultNamespace;\n            }\n        } else if (localDefaultNamespace === null || localDefaultNamespace !== ns) {\n            ignoreNamespaceDefinitionAttr = true;\n            qualifiedName = node.localName;\n            inheritedNs = ns;\n            markup += `${qualifiedName} xmlns=\"${attributeUtils.serializeAttributeValue(ns, requireWellFormed)}\"`;\n        } else {\n            qualifiedName = node.localName;\n            inheritedNs = ns;\n            markup += qualifiedName;\n        }\n    }\n    markup += attributeUtils.serializeAttributes(node, map, localPrefixesMap, ignoreNamespaceDefinitionAttr, requireWellFormed, refs);\n    if (ns === NAMESPACES.HTML && node.childNodes.length === 0 && VOID_ELEMENTS.has(node.localName)) {\n        markup += \" /\";\n        skipEndTag = true;\n    } else if (ns !== NAMESPACES.HTML && node.childNodes.length === 0) {\n        markup += \"/\";\n        skipEndTag = true;\n    }\n    markup += \">\";\n    if (skipEndTag) {\n        return markup;\n    }\n    if (ns === NAMESPACES.HTML && node.localName === \"template\") {\n        markup += xmlSerialization(node.content, inheritedNs, map, requireWellFormed, refs);\n    } else {\n        for (const child of node.childNodes){\n            markup += xmlSerialization(child, inheritedNs, map, requireWellFormed, refs);\n        }\n    }\n    markup += `</${qualifiedName}>`;\n    return markup;\n}\nfunction serializeCDATASection(node) {\n    return `<![CDATA[${node.data}]]>`;\n}\n/**\n * @param {{prefixIndex: number}} refs\n */ function xmlSerialization(node, namespace, prefixMap, requireWellFormed, refs) {\n    switch(node.nodeType){\n        case NODE_TYPES.ELEMENT_NODE:\n            return serializeElement(node, namespace, prefixMap, requireWellFormed, refs);\n        case NODE_TYPES.DOCUMENT_NODE:\n            return serializeDocument(node, namespace, prefixMap, requireWellFormed, refs);\n        case NODE_TYPES.COMMENT_NODE:\n            return serializeComment(node, namespace, prefixMap, requireWellFormed);\n        case NODE_TYPES.TEXT_NODE:\n            return serializeText(node, namespace, prefixMap, requireWellFormed);\n        case NODE_TYPES.DOCUMENT_FRAGMENT_NODE:\n            return serializeDocumentFragment(node, namespace, prefixMap, requireWellFormed, refs);\n        case NODE_TYPES.DOCUMENT_TYPE_NODE:\n            return serializeDocumentType(node, namespace, prefixMap, requireWellFormed);\n        case NODE_TYPES.PROCESSING_INSTRUCTION_NODE:\n            return serializeProcessingInstruction(node, namespace, prefixMap, requireWellFormed);\n        case NODE_TYPES.ATTRIBUTE_NODE:\n            return \"\";\n        case NODE_TYPES.CDATA_SECTION_NODE:\n            return serializeCDATASection(node);\n        default:\n            throw new TypeError(\"Failed to serialize XML: only Nodes can be serialized.\");\n    }\n}\nmodule.exports = (root, { requireWellFormed = false } = {})=>{\n    const namespacePrefixMap = Object.create(null);\n    namespacePrefixMap[\"http://www.w3.org/XML/1998/namespace\"] = [\n        \"xml\"\n    ];\n    return xmlSerialization(root, null, namespacePrefixMap, requireWellFormed, {\n        prefixIndex: 1\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/w3c-xmlserializer/lib/serialize.js\n");

/***/ })

};
;